(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.NVG = {})));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var require$$0 = {};

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // resolves . and .. elements in a path array with directory names there
    // must be no slashes, empty elements, or device names (c:\) in the array
    // (so also no leading and trailing slashes - it does not distinguish
    // relative and absolute paths)
    function normalizeArray(parts, allowAboveRoot) {
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }

      return parts;
    }

    // Split a filename into [root, dir, basename, ext], unix version
    // 'root' is just a slash, or nothing.
    var splitPathRe =
        /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };

    // path.resolve([from ...], to)
    // posix version
    function resolve() {
      var resolvedPath = '',
          resolvedAbsolute = false;

      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : '/';

        // Skip empty and invalid entries
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }

        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }

      // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)

      // Normalize the path
      resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');

      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    }
    // path.normalize(path)
    // posix version
    function normalize(path) {
      var isPathAbsolute = isAbsolute(path),
          trailingSlash = substr(path, -1) === '/';

      // Normalize the path
      path = normalizeArray(filter(path.split('/'), function(p) {
        return !!p;
      }), !isPathAbsolute).join('/');

      if (!path && !isPathAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }

      return (isPathAbsolute ? '/' : '') + path;
    }
    // posix version
    function isAbsolute(path) {
      return path.charAt(0) === '/';
    }

    // posix version
    function join() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return normalize(filter(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    }


    // path.relative(from, to)
    // posix version
    function relative(from, to) {
      from = resolve(from).substr(1);
      to = resolve(to).substr(1);

      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '') break;
        }

        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '') break;
        }

        if (start > end) return [];
        return arr.slice(start, end - start + 1);
      }

      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));

      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }

      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }

      outputParts = outputParts.concat(toParts.slice(samePartsLength));

      return outputParts.join('/');
    }

    var sep = '/';
    var delimiter = ':';

    function dirname(path) {
      var result = splitPath(path),
          root = result[0],
          dir = result[1];

      if (!root && !dir) {
        // No dirname whatsoever
        return '.';
      }

      if (dir) {
        // It has a dirname, strip trailing slash
        dir = dir.substr(0, dir.length - 1);
      }

      return root + dir;
    }

    function basename(path, ext) {
      var f = splitPath(path)[2];
      // TODO: make this comparison case-insensitive on windows?
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }


    function extname(path) {
      return splitPath(path)[3];
    }
    var require$$1 = {
      extname: extname,
      basename: basename,
      dirname: dirname,
      sep: sep,
      delimiter: delimiter,
      relative: relative,
      join: join,
      isAbsolute: isAbsolute,
      normalize: normalize,
      resolve: resolve
    };
    function filter (xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
        }
        return res;
    }

    // String.prototype.substr - negative index don't work in IE8
    var substr = 'ab'.substr(-1) === 'b' ?
        function (str, start, len) { return str.substr(start, len) } :
        function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
        }
    ;

    var bindNanovg = createCommonjsModule(function (module, exports) {
    var Module = (function() {
      var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
      return (
    function(Module) {
      Module = Module || {};

    var Module=typeof Module!=="undefined"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key];}}Module["arguments"]=[];Module["thisProgram"]="./this.program";Module["quit"]=(function(status,toThrow){throw toThrow});Module["preRun"]=[];Module["postRun"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof commonjsRequire==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+"/";var nodeFS;var nodePath;Module["read"]=function shell_read(filename,binary){var ret;ret=tryParseAsDataURI(filename);if(!ret){if(!nodeFS)nodeFS=require$$0;if(!nodePath)nodePath=require$$1;filename=nodePath["normalize"](filename);ret=nodeFS["readFileSync"](filename);}return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret);}assert(ret.buffer);return ret};if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/");}Module["arguments"]=process["argv"].slice(2);process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));process["on"]("unhandledRejection",abort);Module["quit"]=(function(status){process["exit"](status);});Module["inspect"]=(function(){return "[Emscripten Module object]"});}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){Module["read"]=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)};}Module["readBinary"]=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs;}else if(typeof arguments!="undefined"){Module["arguments"]=arguments;}if(typeof quit==="function"){Module["quit"]=(function(status){quit(status);});}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href;}else if(document.currentScript){scriptDirectory=document.currentScript.src;}if(_scriptDir){scriptDirectory=_scriptDir;}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1);}else{scriptDirectory="";}Module["read"]=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){Module["readBinary"]=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}};}Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror();};xhr.onerror=onerror;xhr.send(null);};Module["setWindowTitle"]=(function(title){document.title=title;});}var out=Module["print"]||(typeof console!=="undefined"?console.log.bind(console):typeof print!=="undefined"?print:null);var err=Module["printErr"]||(typeof printErr!=="undefined"?printErr:typeof console!=="undefined"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key];}}moduleOverrides=undefined;var STACK_ALIGN=16;function staticAlloc(size){var ret=STATICTOP;STATICTOP=STATICTOP+size+15&-16;return ret}function alignMemory(size,factor){if(!factor)factor=STACK_ALIGN;var ret=size=Math.ceil(size/factor)*factor;return ret}var asm2wasmImports={"f64-rem":(function(x,y){return x%y}),"debugger":(function(){debugger})};var GLOBAL_BASE=1024;var ABORT=false;function assert(condition,text){if(!condition){abort("Assertion failed: "+text);}}function Pointer_stringify(ptr,length){if(length===0||!ptr)return "";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK;}return ret}return UTF8ToString(ptr)}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2;}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3;}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4;}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5;}}}if(u0<65536){str+=String.fromCharCode(u0);}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023);}}}}function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023;}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u;}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63;}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63;}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63;}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63;}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63;}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len;}else if(u<=2047){len+=2;}else if(u<=65535){len+=3;}else if(u<=2097151){len+=4;}else if(u<=67108863){len+=5;}else{len+=6;}}return len}var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;var WASM_PAGE_SIZE=65536;var ASMJS_PAGE_SIZE=16777216;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple;}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBuffer(buf){Module["buffer"]=buffer=buf;}function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer);}var STATIC_BASE,STATICTOP;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");}function enlargeMemory(){abortOnCannotGrowMemory();}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;if(TOTAL_MEMORY<TOTAL_STACK)err("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+TOTAL_MEMORY+"! (TOTAL_STACK="+TOTAL_STACK+")");if(Module["buffer"]){buffer=Module["buffer"];}else{if(typeof WebAssembly==="object"&&typeof WebAssembly.Memory==="function"){Module["wasmMemory"]=new WebAssembly.Memory({"initial":TOTAL_MEMORY/WASM_PAGE_SIZE,"maximum":TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=Module["wasmMemory"].buffer;}else{buffer=new ArrayBuffer(TOTAL_MEMORY);}Module["buffer"]=buffer;}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func);}else{Module["dynCall_vi"](func,callback.arg);}}else{func(callback.arg===undefined?null:callback.arg);}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift());}}callRuntimeCallbacks(__ATPRERUN__);}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__);}function preMain(){callRuntimeCallbacks(__ATMAIN__);}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift());}}callRuntimeCallbacks(__ATPOSTRUN__);}function addOnPreRun(cb){__ATPRERUN__.unshift(cb);}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb);}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies);}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null;}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback();}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}function integrateWasmJS(){var wasmTextFile="";var wasmBinaryFile="data:application/octet-stream;base64,";var asmjsCodeFile="";if(!isDataURI(wasmTextFile)){wasmTextFile=locateFile(wasmTextFile);}if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile);}if(!isDataURI(asmjsCodeFile)){asmjsCodeFile=locateFile(asmjsCodeFile);}var wasmPageSize=64*1024;var info={"global":null,"env":null,"asm2wasm":asm2wasmImports,"parent":Module};var exports=null;function mergeMemory(newBuffer){var oldBuffer=Module["buffer"];if(newBuffer.byteLength<oldBuffer.byteLength){err("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here");}var oldView=new Int8Array(oldBuffer);var newView=new Int8Array(newBuffer);newView.set(oldView);updateGlobalBuffer(newBuffer);updateGlobalBufferViews();}function getBinary(){try{if(Module["wasmBinary"]){return new Uint8Array(Module["wasmBinary"])}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(Module["readBinary"]){return Module["readBinary"](wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err);}}function getBinaryPromise(){if(!Module["wasmBinary"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then((function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()})).catch((function(){return getBinary()}))}return new Promise((function(resolve,reject){resolve(getBinary());}))}function doNativeWasm(global,env,providedBuffer){if(typeof WebAssembly!=="object"){err("no native wasm support detected");return false}if(!(Module["wasmMemory"]instanceof WebAssembly.Memory)){err("no native wasm Memory in use");return false}env["memory"]=Module["wasmMemory"];info["global"]={"NaN":NaN,"Infinity":Infinity};info["global.Math"]=Math;info["env"]=env;function receiveInstance(instance,module){exports=instance.exports;if(exports.memory)mergeMemory(exports.memory);Module["asm"]=exports;Module["usingWasm"]=true;removeRunDependency("wasm-instantiate");}addRunDependency("wasm-instantiate");if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output["instance"],output["module"]);}function instantiateArrayBuffer(receiver){getBinaryPromise().then((function(binary){return WebAssembly.instantiate(binary,info)})).then(receiver,(function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason);}));}if(!Module["wasmBinary"]&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&typeof fetch==="function"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:"same-origin"}),info).then(receiveInstantiatedSource,(function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");instantiateArrayBuffer(receiveInstantiatedSource);}));}else{instantiateArrayBuffer(receiveInstantiatedSource);}return {}}Module["asmPreload"]=Module["asm"];var asmjsReallocBuffer=Module["reallocBuffer"];var wasmReallocBuffer=(function(size){var PAGE_MULTIPLE=Module["usingWasm"]?WASM_PAGE_SIZE:ASMJS_PAGE_SIZE;size=alignUp(size,PAGE_MULTIPLE);var old=Module["buffer"];var oldSize=old.byteLength;if(Module["usingWasm"]){try{var result=Module["wasmMemory"].grow((size-oldSize)/wasmPageSize);if(result!==(-1|0)){return Module["buffer"]=Module["wasmMemory"].buffer}else{return null}}catch(e){return null}}});Module["reallocBuffer"]=(function(size){{return wasmReallocBuffer(size)}});Module["asm"]=(function(global,env,providedBuffer){if(!env["table"]){var TABLE_SIZE=Module["wasmTableSize"];if(TABLE_SIZE===undefined)TABLE_SIZE=1024;var MAX_TABLE_SIZE=Module["wasmMaxTableSize"];if(typeof WebAssembly==="object"&&typeof WebAssembly.Table==="function"){if(MAX_TABLE_SIZE!==undefined){env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,"maximum":MAX_TABLE_SIZE,"element":"anyfunc"});}else{env["table"]=new WebAssembly.Table({"initial":TABLE_SIZE,element:"anyfunc"});}}else{env["table"]=new Array(TABLE_SIZE);}Module["wasmTable"]=env["table"];}if(!env["__memory_base"]){env["__memory_base"]=Module["STATIC_BASE"];}if(!env["__table_base"]){env["__table_base"]=0;}var exports;exports=doNativeWasm(global,env,providedBuffer);assert(exports,"no binaryen method succeeded.");return exports});}integrateWasmJS();STATIC_BASE=GLOBAL_BASE;STATICTOP=STATIC_BASE+22368;__ATINIT__.push({func:(function(){__GLOBAL__sub_I_bind_nanovg_cpp();})},{func:(function(){__GLOBAL__sub_I_bind_cpp();})});var STATIC_BUMP=22368;Module["STATIC_BASE"]=STATIC_BASE;Module["STATIC_BUMP"]=STATIC_BUMP;STATICTOP+=16;function ___assert_fail(condition,filename,line,func){abort("Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"]);}var SYSCALLS={buffers:[null,[],[]],printChar:(function(stream,curr){var buffer=SYSCALLS.buffers[stream];assert(buffer);if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0;}else{buffer.push(curr);}}),varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0);})};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(stream,HEAPU8[ptr+j]);}ret+=len;}return ret}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return -e.errno}}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i);}embind_charCodes=codes;}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]];}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return "_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return "_"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return (new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n"))(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,(function(message){this.name=errorName;this.message=message;var stack=(new Error(message)).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"");}}));errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=(function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}});return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach((function(type){typeDependencies[type]=dependentTypes;}));function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count");}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i]);}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach((function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt];}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[];}awaitingDependencies[dt].push((function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters);}}));}}));if(0===unregisteredTypes.length){onComplete(typeConverters);}}function registerType(rawType,registeredInstance,options){options=options||{};if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer');}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice");}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach((function(cb){cb();}));}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(wt){return !!wt}),"toWireType":(function(destructors,o){return o?trueValue:falseValue}),"argPackAdvance":8,"readValueFromPointer":(function(pointer){var heap;if(size===1){heap=HEAP8;}else if(size===2){heap=HEAP16;}else if(size===4){heap=HEAP32;}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])}),destructorFunction:null});}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass;}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass;}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return {count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted");}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}});clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function runDestructor(handle){var $$=handle.$$;if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr);}else{$$.ptrType.registeredClass.rawDestructor($$.ptr);}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}this.$$.count.value-=1;var toDelete=0===this.$$.count.value;if(toDelete){runDestructor(this);}if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined;}}function ClassHandle_isDeleted(){return !this.$$.ptr}var delayFunction=undefined;var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]();}}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this);}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion");}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes);}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater;}function ClassHandle(){}var registeredPointers={};function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=(function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!");}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)});proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc;}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice");}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!");}Module[name].overloadTable[numArguments]=value;}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments;}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[];}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name);}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass;}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr);}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal");}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name);}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr;}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,__emval_register((function(){clonedHandle["delete"]();})));if(destructors!==null){destructors.push(this.rawDestructor,ptr);}}break;default:throwBindingError("Unsupporting sharing policy");}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name);}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name);}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name);}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name);}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr);}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr);}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]();}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k]);}}return rv}function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes);}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction;}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined");}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass;}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType");}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified");}record.count={value:1};return Object.create(prototype,{$$:{value:record}})}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType;}else{toType=registeredPointerRecord.pointerType;}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType;}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null;}}else{this["toWireType"]=genericPointerToWireType;}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol");}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value;}else{Module[name]=value;Module[name].argCount=numArguments;}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(dynCall){var args=[];for(var i=1;i<signature.length;++i){args.push("a"+i);}var name="dynCall_"+signature+"_"+rawFunction;var body="return function "+name+"("+args.join(", ")+") {\n";body+="    return dynCall(rawFunction"+(args.length?", ":"")+args.join(", ")+");\n";body+="};\n";return (new Function("dynCall","rawFunction",body))(dynCall,rawFunction)}var fp;if(Module["FUNCTION_TABLE_"+signature]!==undefined){fp=Module["FUNCTION_TABLE_"+signature][rawFunction];}else if(typeof FUNCTION_TABLE!=="undefined"){fp=FUNCTION_TABLE[rawFunction];}else{var dc=Module["dynCall_"+signature];if(dc===undefined){dc=Module["dynCall_"+signature.replace(/f/g,"d")];if(dc===undefined){throwBindingError("No dynCall invoker for signature: "+signature);}}fp=makeDynCaller(dc);}if(typeof fp!=="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction);}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true;}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast);}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast);}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,(function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType]);}));whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],(function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype;}else{basePrototype=ClassHandle.prototype;}var constructor=createNamedFunction(legalFunctionName,(function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)}));var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return [referenceConverter,pointerConverter,constPointerConverter]}));}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr);}}function validateThis(this_,classType,humanName){if(!(this_ instanceof Object)){throwBindingError(humanName+' with invalid "this": '+this_);}if(!(this_ instanceof classType.registeredClass.constructor)){throwBindingError(humanName+' incompatible with "this" of type '+this_.constructor.name);}if(!this_.$$.ptr){throwBindingError("cannot call emscripten binding method "+humanName+" on deleted object");}return upcastPointer(this_.$$.ptr,this_.$$.ptrType.registeredClass,classType.registeredClass)}function __embind_register_class_property(classType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){fieldName=readLatin1String(fieldName);getter=embind__requireFunction(getterSignature,getter);whenDependentTypesAreResolved([],[classType],(function(classType){classType=classType[0];var humanName=classType.name+"."+fieldName;var desc={get:(function(){throwUnboundTypeError("Cannot access "+humanName+" due to unbound types",[getterReturnType,setterArgumentType]);}),enumerable:true,configurable:true};if(setter){desc.set=(function(){throwUnboundTypeError("Cannot access "+humanName+" due to unbound types",[getterReturnType,setterArgumentType]);});}else{desc.set=(function(v){throwBindingError(humanName+" is a read-only property");});}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);whenDependentTypesAreResolved([],setter?[getterReturnType,setterArgumentType]:[getterReturnType],(function(types){var getterReturnType=types[0];var desc={get:(function(){var ptr=validateThis(this,classType,humanName+" getter");return getterReturnType["fromWireType"](getter(getterContext,ptr))}),enumerable:true};if(setter){setter=embind__requireFunction(setterSignature,setter);var setterArgumentType=types[1];desc.set=(function(v){var ptr=validateThis(this,classType,humanName+" setter");var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,v));runDestructors(destructors);});}Object.defineProperty(classType.registeredClass.instancePrototype,fieldName,desc);return []}));return []}));}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle);}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count;}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval;}function __emval_register(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(handle){var rv=emval_handle_array[handle].value;__emval_decref(handle);return rv}),"toWireType":(function(destructors,value){return __emval_register(value)}),"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null});}function _embind_repr(v){if(v===null){return "null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return ""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return(function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])});case 3:return(function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])});default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":(function(value){return value}),"toWireType":(function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}return value}),"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null});}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",(function(){}));dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired";}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n";}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n";}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2]);}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired;}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n";}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction);}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n";}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i]);}return array}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,(function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes);}),argCount-1);whenDependentTypesAreResolved([],argTypes,(function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return []}));}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295;}var shift=getShiftFromSize(size);var fromWireType=(function(value){return value});if(minRange===0){var bitshift=32-8*size;fromWireType=(function(value){return value<<bitshift>>>bitshift});}var isUnsignedType=name.indexOf("unsigned")!=-1;registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":(function(destructors,value){if(typeof value!=="number"&&typeof value!=="boolean"){throw new TypeError('Cannot convert "'+_embind_repr(value)+'" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number "'+_embind_repr(value)+'" from JS side to C/C++ side to an argument of type "'+name+'", which is outside the valid range ['+minRange+", "+maxRange+"]!")}return isUnsignedType?value>>>0:value|0}),"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null});}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(heap["buffer"],data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true});}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":(function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var endChar=HEAPU8[value+4+length];var endCharSwap=0;if(endChar!=0){endCharSwap=endChar;HEAPU8[value+4+length]=0;}var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(HEAPU8[currentBytePtr]==0){var stringSegment=UTF8ToString(decodeStartPtr);if(str===undefined)str=stringSegment;else{str+=String.fromCharCode(0);str+=stringSegment;}decodeStartPtr=currentBytePtr+1;}}if(endCharSwap!=0)HEAPU8[value+4+length]=endCharSwap;}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i]);}str=a.join("");}_free(value);return str}),"toWireType":(function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value);}var getLength;var valueIsOfTypeString=typeof value==="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string");}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=(function(){return lengthBytesUTF8(value)});}else{getLength=(function(){return value.length});}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1);}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits");}HEAPU8[ptr+4+i]=charCode;}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i];}}}if(destructors!==null){destructors.push(_free,ptr);}return ptr}),"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:(function(ptr){_free(ptr);})});}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var getHeap,shift;if(charSize===2){getHeap=(function(){return HEAPU16});shift=1;}else if(charSize===4){getHeap=(function(){return HEAPU32});shift=2;}registerType(rawType,{name:name,"fromWireType":(function(value){var HEAP=getHeap();var length=HEAPU32[value>>2];var a=new Array(length);var start=value+4>>shift;for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAP[start+i]);}_free(value);return a.join("")}),"toWireType":(function(destructors,value){var HEAP=getHeap();var length=value.length;var ptr=_malloc(4+length*charSize);HEAPU32[ptr>>2]=length;var start=ptr+4>>shift;for(var i=0;i<length;++i){HEAP[start+i]=value.charCodeAt(i);}if(destructors!==null){destructors.push(_free,ptr);}return ptr}),"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:(function(ptr){_free(ptr);})});}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":(function(){return undefined}),"toWireType":(function(destructors,o){return undefined})});}function requireHandle(handle){if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle);}return emval_handle_array[handle].value}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType));}return impl}function __emval_as(handle,returnType,destructorsRef){handle=requireHandle(handle);returnType=requireRegisteredType(returnType,"emval::as");var destructors=[];var rd=__emval_register(destructors);HEAP32[destructorsRef>>2]=rd;return returnType["toWireType"](destructors,handle)}function __emval_allocateDestructors(destructorsRef){var destructors=[];HEAP32[destructorsRef>>2]=__emval_register(destructors);return destructors}var emval_symbols={};function getStringOrSymbol(address){var symbol=emval_symbols[address];if(symbol===undefined){return readLatin1String(address)}else{return symbol}}var emval_methodCallers=[];function __emval_call_method(caller,handle,methodName,destructorsRef,args){caller=emval_methodCallers[caller];handle=requireHandle(handle);methodName=getStringOrSymbol(methodName);return caller(handle,methodName,__emval_allocateDestructors(destructorsRef),args)}function __emval_call_void_method(caller,handle,methodName,args){caller=emval_methodCallers[caller];handle=requireHandle(handle);methodName=getStringOrSymbol(methodName);caller(handle,methodName,null,args);}function __emval_delete(object,property){object=requireHandle(object);property=requireHandle(property);return delete object[property]}function __emval_addMethodCaller(caller){var id=emval_methodCallers.length;emval_methodCallers.push(caller);return id}function __emval_lookupTypes(argCount,argTypes,argWireTypes){var a=new Array(argCount);for(var i=0;i<argCount;++i){a[i]=requireRegisteredType(HEAP32[(argTypes>>2)+i],"parameter "+i);}return a}function __emval_get_method_caller(argCount,argTypes){var types=__emval_lookupTypes(argCount,argTypes);var retType=types[0];var signatureName=retType.name+"_$"+types.slice(1).map((function(t){return t.name})).join("_")+"$";var params=["retType"];var args=[retType];var argsList="";for(var i=0;i<argCount-1;++i){argsList+=(i!==0?", ":"")+"arg"+i;params.push("argType"+i);args.push(types[1+i]);}var functionName=makeLegalFunctionName("methodCaller_"+signatureName);var functionBody="return function "+functionName+"(handle, name, destructors, args) {\n";var offset=0;for(var i=0;i<argCount-1;++i){functionBody+="    var arg"+i+" = argType"+i+".readValueFromPointer(args"+(offset?"+"+offset:"")+");\n";offset+=types[i+1]["argPackAdvance"];}functionBody+="    var rv = handle[name]("+argsList+");\n";for(var i=0;i<argCount-1;++i){if(types[i+1]["deleteObject"]){functionBody+="    argType"+i+".deleteObject(arg"+i+");\n";}}if(!retType.isVoid){functionBody+="    return retType.toWireType(destructors, rv);\n";}functionBody+="};\n";params.push(functionBody);var invokerFunction=new_(Function,params).apply(null,args);return __emval_addMethodCaller(invokerFunction)}function __emval_get_property(handle,key){handle=requireHandle(handle);key=requireHandle(key);return __emval_register(handle[key])}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1;}}function __emval_new_array(){return __emval_register([])}function __emval_new_cstring(v){return __emval_register(getStringOrSymbol(v))}function __emval_new_object(){return __emval_register({})}function __emval_run_destructors(handle){var destructors=emval_handle_array[handle].value;runDestructors(destructors);__emval_decref(handle);}function __emval_set_property(handle,key,value){handle=requireHandle(handle);key=requireHandle(key);value=requireHandle(value);handle[key]=value;}function __emval_strictly_equals(first,second){first=requireHandle(first);second=requireHandle(second);return first===second}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return __emval_register(v)}function _abort(){Module["abort"]();}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}var PTHREAD_SPECIFIC_NEXT_KEY=1;var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Module["dynCall_v"](func);_pthread_once.seen[ptr]=1;}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");InternalError=Module["InternalError"]=extendError(Error,"InternalError");init_ClassHandle();init_RegisteredPointer();init_embind();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();DYNAMICTOP_PTR=staticAlloc(4);STACK_BASE=STACKTOP=alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255;}ret.push(String.fromCharCode(chr));}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:(function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2);}if(enc4!==64){output=output+String.fromCharCode(chr3);}}while(i<input.length);return output});function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64");}catch(_){buf=new Buffer(s,"base64");}return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i);}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}Module["wasmTableSize"]=330;Module["wasmMaxTableSize"]=330;Module.asmGlobalArg={};Module.asmLibraryArg={"c":abort,"R":enlargeMemory,"N":getTotalMemory,"I":abortOnCannotGrowMemory,"e":___assert_fail,"s":___setErrNo,"y":___syscall140,"r":___syscall146,"x":___syscall54,"w":___syscall6,"Q":__embind_register_bool,"o":__embind_register_class,"h":__embind_register_class_property,"P":__embind_register_emval,"v":__embind_register_float,"d":__embind_register_function,"k":__embind_register_integer,"i":__embind_register_memory_view,"u":__embind_register_std_string,"O":__embind_register_std_wstring,"M":__embind_register_void,"n":__emval_as,"l":__emval_call_method,"g":__emval_call_void_method,"L":__emval_decref,"K":__emval_delete,"f":__emval_get_method_caller,"q":__emval_get_property,"t":__emval_incref,"J":__emval_new_array,"H":__emval_new_cstring,"G":__emval_new_object,"F":__emval_run_destructors,"j":__emval_set_property,"E":__emval_strictly_equals,"m":__emval_take_value,"p":_abort,"D":_emscripten_memcpy_big,"C":_pthread_getspecific,"B":_pthread_key_create,"A":_pthread_once,"z":_pthread_setspecific,"a":DYNAMICTOP_PTR,"b":STACKTOP};var asm=Module["asm"](Module.asmGlobalArg,Module.asmLibraryArg,buffer);Module["asm"]=asm;var __GLOBAL__sub_I_bind_cpp=Module["__GLOBAL__sub_I_bind_cpp"]=(function(){return Module["asm"]["S"].apply(null,arguments)});var __GLOBAL__sub_I_bind_nanovg_cpp=Module["__GLOBAL__sub_I_bind_nanovg_cpp"]=(function(){return Module["asm"]["T"].apply(null,arguments)});var ___getTypeName=Module["___getTypeName"]=(function(){return Module["asm"]["U"].apply(null,arguments)});var _free=Module["_free"]=(function(){return Module["asm"]["V"].apply(null,arguments)});var _malloc=Module["_malloc"]=(function(){return Module["asm"]["W"].apply(null,arguments)});var dynCall_fiffii=Module["dynCall_fiffii"]=(function(){return Module["asm"]["X"].apply(null,arguments)});var dynCall_fiffiii=Module["dynCall_fiffiii"]=(function(){return Module["asm"]["Y"].apply(null,arguments)});var dynCall_fii=Module["dynCall_fii"]=(function(){return Module["asm"]["Z"].apply(null,arguments)});var dynCall_fiiffii=Module["dynCall_fiiffii"]=(function(){return Module["asm"]["_"].apply(null,arguments)});var dynCall_fiiffiii=Module["dynCall_fiiffiii"]=(function(){return Module["asm"]["$"].apply(null,arguments)});var dynCall_ii=Module["dynCall_ii"]=(function(){return Module["asm"]["aa"].apply(null,arguments)});var dynCall_iiffiiii=Module["dynCall_iiffiiii"]=(function(){return Module["asm"]["ba"].apply(null,arguments)});var dynCall_iii=Module["dynCall_iii"]=(function(){return Module["asm"]["ca"].apply(null,arguments)});var dynCall_iiiffffffiii=Module["dynCall_iiiffffffiii"]=(function(){return Module["asm"]["da"].apply(null,arguments)});var dynCall_iiifffffifi=Module["dynCall_iiifffffifi"]=(function(){return Module["asm"]["ea"].apply(null,arguments)});var dynCall_iiiffffiii=Module["dynCall_iiiffffiii"]=(function(){return Module["asm"]["fa"].apply(null,arguments)});var dynCall_iiiffiiii=Module["dynCall_iiiffiiii"]=(function(){return Module["asm"]["ga"].apply(null,arguments)});var dynCall_iiii=Module["dynCall_iiii"]=(function(){return Module["asm"]["ha"].apply(null,arguments)});var dynCall_iiiifii=Module["dynCall_iiiifii"]=(function(){return Module["asm"]["ia"].apply(null,arguments)});var dynCall_iiiii=Module["dynCall_iiiii"]=(function(){return Module["asm"]["ja"].apply(null,arguments)});var dynCall_iiiiifii=Module["dynCall_iiiiifii"]=(function(){return Module["asm"]["ka"].apply(null,arguments)});var dynCall_iiiiii=Module["dynCall_iiiiii"]=(function(){return Module["asm"]["la"].apply(null,arguments)});var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=(function(){return Module["asm"]["ma"].apply(null,arguments)});var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=(function(){return Module["asm"]["na"].apply(null,arguments)});var dynCall_v=Module["dynCall_v"]=(function(){return Module["asm"]["oa"].apply(null,arguments)});var dynCall_vi=Module["dynCall_vi"]=(function(){return Module["asm"]["pa"].apply(null,arguments)});var dynCall_vif=Module["dynCall_vif"]=(function(){return Module["asm"]["qa"].apply(null,arguments)});var dynCall_viff=Module["dynCall_viff"]=(function(){return Module["asm"]["ra"].apply(null,arguments)});var dynCall_vifff=Module["dynCall_vifff"]=(function(){return Module["asm"]["sa"].apply(null,arguments)});var dynCall_viffff=Module["dynCall_viffff"]=(function(){return Module["asm"]["ta"].apply(null,arguments)});var dynCall_vifffff=Module["dynCall_vifffff"]=(function(){return Module["asm"]["ua"].apply(null,arguments)});var dynCall_viffffff=Module["dynCall_viffffff"]=(function(){return Module["asm"]["va"].apply(null,arguments)});var dynCall_viffffffff=Module["dynCall_viffffffff"]=(function(){return Module["asm"]["wa"].apply(null,arguments)});var dynCall_vifffffi=Module["dynCall_vifffffi"]=(function(){return Module["asm"]["xa"].apply(null,arguments)});var dynCall_vifffii=Module["dynCall_vifffii"]=(function(){return Module["asm"]["ya"].apply(null,arguments)});var dynCall_vifffiii=Module["dynCall_vifffiii"]=(function(){return Module["asm"]["za"].apply(null,arguments)});var dynCall_vii=Module["dynCall_vii"]=(function(){return Module["asm"]["Aa"].apply(null,arguments)});var dynCall_viif=Module["dynCall_viif"]=(function(){return Module["asm"]["Ba"].apply(null,arguments)});var dynCall_viiff=Module["dynCall_viiff"]=(function(){return Module["asm"]["Ca"].apply(null,arguments)});var dynCall_viifff=Module["dynCall_viifff"]=(function(){return Module["asm"]["Da"].apply(null,arguments)});var dynCall_viiffff=Module["dynCall_viiffff"]=(function(){return Module["asm"]["Ea"].apply(null,arguments)});var dynCall_viifffff=Module["dynCall_viifffff"]=(function(){return Module["asm"]["Fa"].apply(null,arguments)});var dynCall_viiffffff=Module["dynCall_viiffffff"]=(function(){return Module["asm"]["Ga"].apply(null,arguments)});var dynCall_viiffffffff=Module["dynCall_viiffffffff"]=(function(){return Module["asm"]["Ha"].apply(null,arguments)});var dynCall_viiffffffiii=Module["dynCall_viiffffffiii"]=(function(){return Module["asm"]["Ia"].apply(null,arguments)});var dynCall_viifffffi=Module["dynCall_viifffffi"]=(function(){return Module["asm"]["Ja"].apply(null,arguments)});var dynCall_viifffffifi=Module["dynCall_viifffffifi"]=(function(){return Module["asm"]["Ka"].apply(null,arguments)});var dynCall_viiffffiii=Module["dynCall_viiffffiii"]=(function(){return Module["asm"]["La"].apply(null,arguments)});var dynCall_viifffii=Module["dynCall_viifffii"]=(function(){return Module["asm"]["Ma"].apply(null,arguments)});var dynCall_viifffiii=Module["dynCall_viifffiii"]=(function(){return Module["asm"]["Na"].apply(null,arguments)});var dynCall_viii=Module["dynCall_viii"]=(function(){return Module["asm"]["Oa"].apply(null,arguments)});var dynCall_viiii=Module["dynCall_viiii"]=(function(){return Module["asm"]["Pa"].apply(null,arguments)});var dynCall_viiiiffii=Module["dynCall_viiiiffii"]=(function(){return Module["asm"]["Qa"].apply(null,arguments)});var dynCall_viiiifiii=Module["dynCall_viiiifiii"]=(function(){return Module["asm"]["Ra"].apply(null,arguments)});var dynCall_viiiii=Module["dynCall_viiiii"]=(function(){return Module["asm"]["Sa"].apply(null,arguments)});var dynCall_viiiiii=Module["dynCall_viiiiii"]=(function(){return Module["asm"]["Ta"].apply(null,arguments)});Module["asm"]=asm;Module["then"]=(function(func){if(Module["calledRun"]){func(Module);}else{var old=Module["onRuntimeInitialized"];Module["onRuntimeInitialized"]=(function(){if(old)old();func(Module);});}return Module});function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status;}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller;};function run(args){args=args||Module["arguments"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun();}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("");}),1);doRun();}),1);}else{doRun();}}Module["run"]=run;function abort(what){if(Module["onAbort"]){Module["onAbort"](what);}if(what!==undefined){out(what);err(what);what=JSON.stringify(what);}else{what="";}ABORT=true;throw"abort("+what+"). Build with -s ASSERTIONS=1 for more info."}Module["abort"]=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()();}}Module["noExitRuntime"]=true;run();





      return Module;
    }
    );
    })();
    module.exports = Module;
    });
    var bindNanovg_1 = bindNanovg.bind;

    var bindNanovg$1 = /*#__PURE__*/Object.freeze({
        default: bindNanovg,
        __moduleExports: bindNanovg,
        bind: bindNanovg_1
    });

    function nanovg (value) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                bindNanovg(value).then((value) => {
                    exports.bind = value;
                    resolve();
                });
            });
        });
    }
    const NVG_PI = 3.14159265358979323846264338327;
    // static float nvg__sqrtf(float a) { return sqrtf(a); }
    function nvg__modf(a, b) { return a % b; }
    // static float nvg__sinf(float a) { return sinf(a); }
    // static float nvg__cosf(float a) { return cosf(a); }
    // static float nvg__tanf(float a) { return tanf(a); }
    // static float nvg__atan2f(float a,float b) { return atan2f(a, b); }
    // static float nvg__acosf(float a) { return acosf(a); }
    // static int nvg__mini(int a, int b) { return a < b ? a : b; }
    // static int nvg__maxi(int a, int b) { return a > b ? a : b; }
    // static int nvg__clampi(int a, int mn, int mx) { return a < mn ? mn : (a > mx ? mx : a); }
    // static float nvg__minf(float a, float b) { return a < b ? a : b; }
    // static float nvg__maxf(float a, float b) { return a > b ? a : b; }
    // static float nvg__absf(float a) { return a >= 0.0f ? a : -a; }
    // static float nvg__signf(float a) { return a >= 0.0f ? 1.0f : -1.0f; }
    function nvg__clampf(a, mn, mx) { return a < mn ? mn : mx < a ? mx : a; }
    // static float nvg__cross(float dx0, float dy0, float dx1, float dy1) { return dx1*dy0 - dx0*dy1; }
    // struct NVGcolor {
    //   union {
    //     float rgba[4];
    //     struct {
    //       float r,g,b,a;
    //     };
    //   };
    // };
    // typedef struct NVGcolor NVGcolor;
    class NVGcolor {
        constructor(rgba = new Float32Array(4)) {
            this.rgba = rgba;
        }
        get r() { return this.rgba[0]; }
        set r(value) { this.rgba[0] = value; }
        get g() { return this.rgba[1]; }
        set g(value) { this.rgba[1] = value; }
        get b() { return this.rgba[2]; }
        set b(value) { this.rgba[2] = value; }
        get a() { return this.rgba[3]; }
        set a(value) { this.rgba[3] = value; }
    }
    // struct NVGpaint {
    //   float xform[6];
    //   float extent[2];
    //   float radius;
    //   float feather;
    //   NVGcolor innerColor;
    //   NVGcolor outerColor;
    //   int image;
    // };
    // typedef struct NVGpaint NVGpaint;
    class NVGpaint {
        constructor(_array = new Float32Array(18)) {
            this.image = 0;
            this.xform = new Float32Array(_array.subarray(0, 6));
            this.extent = new Float32Array(_array.subarray(6, 8));
            this._radius = new Float32Array(_array.subarray(8, 9));
            this._feather = new Float32Array(_array.subarray(9, 10));
            this.innerColor = new NVGcolor(new Float32Array(_array.subarray(10, 14)));
            this.outerColor = new NVGcolor(new Float32Array(_array.subarray(14, 18)));
        }
        get radius() { return this._radius[0]; }
        set radius(value) { this._radius[0] = value; }
        get feather() { return this._feather[0]; }
        set feather(value) { this._feather[0] = value; }
    }
    (function (NVGwinding) {
        NVGwinding[NVGwinding["CCW"] = 1] = "CCW";
        NVGwinding[NVGwinding["CW"] = 2] = "CW";
    })(exports.Winding || (exports.Winding = {}));
    (function (NVGsolidity) {
        NVGsolidity[NVGsolidity["SOLID"] = 1] = "SOLID";
        NVGsolidity[NVGsolidity["HOLE"] = 2] = "HOLE";
    })(exports.Solidity || (exports.Solidity = {}));
    (function (NVGlineCap) {
        NVGlineCap[NVGlineCap["BUTT"] = 0] = "BUTT";
        NVGlineCap[NVGlineCap["ROUND"] = 1] = "ROUND";
        NVGlineCap[NVGlineCap["NVG_SQUARE"] = 2] = "NVG_SQUARE";
        NVGlineCap[NVGlineCap["BEVEL"] = 3] = "BEVEL";
        NVGlineCap[NVGlineCap["MITER"] = 4] = "MITER";
    })(exports.LineCap || (exports.LineCap = {}));
    (function (NVGalign) {
        // Horizontal align
        NVGalign[NVGalign["LEFT"] = 1] = "LEFT";
        NVGalign[NVGalign["CENTER"] = 2] = "CENTER";
        NVGalign[NVGalign["RIGHT"] = 4] = "RIGHT";
        // Vertical align
        NVGalign[NVGalign["TOP"] = 8] = "TOP";
        NVGalign[NVGalign["MIDDLE"] = 16] = "MIDDLE";
        NVGalign[NVGalign["BOTTOM"] = 32] = "BOTTOM";
        NVGalign[NVGalign["BASELINE"] = 64] = "BASELINE";
    })(exports.Align || (exports.Align = {}));
    (function (NVGblendFactor) {
        NVGblendFactor[NVGblendFactor["ZERO"] = 1] = "ZERO";
        NVGblendFactor[NVGblendFactor["ONE"] = 2] = "ONE";
        NVGblendFactor[NVGblendFactor["SRC_COLOR"] = 4] = "SRC_COLOR";
        NVGblendFactor[NVGblendFactor["ONE_MINUS_SRC_COLOR"] = 8] = "ONE_MINUS_SRC_COLOR";
        NVGblendFactor[NVGblendFactor["DST_COLOR"] = 16] = "DST_COLOR";
        NVGblendFactor[NVGblendFactor["ONE_MINUS_DST_COLOR"] = 32] = "ONE_MINUS_DST_COLOR";
        NVGblendFactor[NVGblendFactor["SRC_ALPHA"] = 64] = "SRC_ALPHA";
        NVGblendFactor[NVGblendFactor["ONE_MINUS_SRC_ALPHA"] = 128] = "ONE_MINUS_SRC_ALPHA";
        NVGblendFactor[NVGblendFactor["DST_ALPHA"] = 256] = "DST_ALPHA";
        NVGblendFactor[NVGblendFactor["ONE_MINUS_DST_ALPHA"] = 512] = "ONE_MINUS_DST_ALPHA";
        NVGblendFactor[NVGblendFactor["SRC_ALPHA_SATURATE"] = 1024] = "SRC_ALPHA_SATURATE";
    })(exports.BlendFactor || (exports.BlendFactor = {}));
    (function (NVGcompositeOperation) {
        NVGcompositeOperation[NVGcompositeOperation["SOURCE_OVER"] = 0] = "SOURCE_OVER";
        NVGcompositeOperation[NVGcompositeOperation["SOURCE_IN"] = 1] = "SOURCE_IN";
        NVGcompositeOperation[NVGcompositeOperation["SOURCE_OUT"] = 2] = "SOURCE_OUT";
        NVGcompositeOperation[NVGcompositeOperation["ATOP"] = 3] = "ATOP";
        NVGcompositeOperation[NVGcompositeOperation["DESTINATION_OVER"] = 4] = "DESTINATION_OVER";
        NVGcompositeOperation[NVGcompositeOperation["DESTINATION_IN"] = 5] = "DESTINATION_IN";
        NVGcompositeOperation[NVGcompositeOperation["DESTINATION_OUT"] = 6] = "DESTINATION_OUT";
        NVGcompositeOperation[NVGcompositeOperation["DESTINATION_ATOP"] = 7] = "DESTINATION_ATOP";
        NVGcompositeOperation[NVGcompositeOperation["LIGHTER"] = 8] = "LIGHTER";
        NVGcompositeOperation[NVGcompositeOperation["COPY"] = 9] = "COPY";
        NVGcompositeOperation[NVGcompositeOperation["XOR"] = 10] = "XOR";
    })(exports.CompositeOperation || (exports.CompositeOperation = {}));
    // struct NVGcompositeOperationState {
    //   int srcRGB;
    //   int dstRGB;
    //   int srcAlpha;
    //   int dstAlpha;
    // };
    // typedef struct NVGcompositeOperationState NVGcompositeOperationState;
    class NVGcompositeOperationState {
        constructor() {
            this.srcRGB = 0;
            this.dstRGB = 0;
            this.srcAlpha = 0;
            this.dstAlpha = 0;
        }
    }
    // struct NVGglyphPosition {
    //   const char* str;  // Position of the glyph in the input string.
    //   float x;      // The x-coordinate of the logical glyph position.
    //   float minx, maxx;  // The bounds of the glyph shape.
    // };
    // typedef struct NVGglyphPosition NVGglyphPosition;
    class NVGglyphPosition {
        constructor() {
            this.str = 0;
            this.x = 0.0;
            this.minx = 0.0;
            this.maxx = 0.0;
        }
    }
    // struct NVGtextRow {
    //   const char* start;  // Pointer to the input text where the row starts.
    //   const char* end;  // Pointer to the input text where the row ends (one past the last character).
    //   const char* next;  // Pointer to the beginning of the next row.
    //   float width;    // Logical width of the row.
    //   float minx, maxx;  // Actual bounds of the row. Logical with and bounds can differ because of kerning and some parts over extending.
    // };
    // typedef struct NVGtextRow NVGtextRow;
    class NVGtextRow {
        constructor() {
            this.start = 0;
            this.end = 0;
            this.next = 0;
            this.width = 0.0;
            this.minx = 0.0;
            this.maxx = 0.0;
        }
    }
    (function (NVGimageFlags) {
        NVGimageFlags[NVGimageFlags["GENERATE_MIPMAPS"] = 1] = "GENERATE_MIPMAPS";
        NVGimageFlags[NVGimageFlags["REPEATX"] = 2] = "REPEATX";
        NVGimageFlags[NVGimageFlags["REPEATY"] = 4] = "REPEATY";
        NVGimageFlags[NVGimageFlags["FLIPY"] = 8] = "FLIPY";
        NVGimageFlags[NVGimageFlags["PREMULTIPLIED"] = 16] = "PREMULTIPLIED";
        NVGimageFlags[NVGimageFlags["NEAREST"] = 32] = "NEAREST";
    })(exports.ImageFlags || (exports.ImageFlags = {}));
    // Begin drawing a new frame
    // Calls to nanovg drawing API should be wrapped in nvgBeginFrame() & nvgEndFrame()
    // nvgBeginFrame() defines the size of the window to render to in relation currently
    // set viewport (i.e. glViewport on GL backends). Device pixel ration allows to
    // control the rendering on Hi-DPI devices.
    // For example, GLFW returns two dimension for an opened window: window size and
    // frame buffer size. In that case you would set windowWidth/Height to the window size
    // devicePixelRatio to: frameBufferWidth / windowWidth.
    // void nvgBeginFrame(NVGcontext* ctx, float windowWidth, float windowHeight, float devicePixelRatio);
    function nvgBeginFrame(ctx, windowWidth, windowHeight, devicePixelRatio) {
        exports.bind.nvgBeginFrame(ctx, windowWidth, windowHeight, devicePixelRatio);
    }
    // Cancels drawing the current frame.
    // void nvgCancelFrame(NVGcontext* ctx);
    function nvgCancelFrame(ctx) {
        exports.bind.nvgCancelFrame(ctx);
    }
    // Ends drawing flushing remaining render state.
    // void nvgEndFrame(NVGcontext* ctx);
    function nvgEndFrame(ctx) {
        exports.bind.nvgEndFrame(ctx);
    }
    //
    // Composite operation
    //
    // The composite operations in NanoVG are modeled after HTML Canvas API, and
    // the blend func is based on OpenGL (see corresponding manuals for more info).
    // The colors in the blending state have premultiplied alpha.
    // Sets the composite operation. The op parameter should be one of NVGcompositeOperation.
    // void nvgGlobalCompositeOperation(NVGcontext* ctx, int op);
    function nvgGlobalCompositeOperation(ctx, op) {
        exports.bind.nvgGlobalCompositeOperation(ctx, op);
    }
    // Sets the composite operation with custom pixel arithmetic. The parameters should be one of NVGblendFactor.
    // void nvgGlobalCompositeBlendFunc(NVGcontext* ctx, int sfactor, int dfactor);
    function nvgGlobalCompositeBlendFunc(ctx, sfactor, dfactor) {
        exports.bind.nvgGlobalCompositeBlendFunc(ctx, sfactor, dfactor);
    }
    // Sets the composite operation with custom pixel arithmetic for RGB and alpha components separately. The parameters should be one of NVGblendFactor.
    // void nvgGlobalCompositeBlendFuncSeparate(NVGcontext* ctx, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);
    function nvgGlobalCompositeBlendFuncSeparate(ctx, srcRGB, dstRGB, srcAlpha, dstAlpha) {
        exports.bind.nvgGlobalCompositeBlendFuncSeparate(ctx, srcRGB, dstRGB, srcAlpha, dstAlpha);
    }
    //
    // Color utils
    //
    // Colors in NanoVG are stored as unsigned ints in ABGR format.
    // Returns a color value from red, green, blue values. Alpha will be set to 255 (1.0f).
    // NVGcolor nvgRGB(unsigned char r, unsigned char g, unsigned char b);
    function nvgRGB(r, g, b, out = new NVGcolor()) {
        return nvgRGBA(r, g, b, 255, out);
    }
    // Returns a color value from red, green, blue values. Alpha will be set to 1.0f.
    // NVGcolor nvgRGBf(float r, float g, float b);
    function nvgRGBf(r, g, b, out = new NVGcolor()) {
        return nvgRGBAf(r, g, b, 1.0, out);
    }
    // Returns a color value from red, green, blue and alpha values.
    // NVGcolor nvgRGBA(unsigned char r, unsigned char g, unsigned char b, unsigned char a);
    function nvgRGBA(r, g, b, a, out = new NVGcolor()) {
        out.r = r / 255.0;
        out.g = g / 255.0;
        out.b = b / 255.0;
        out.a = a / 255.0;
        return out;
    }
    // Returns a color value from red, green, blue and alpha values.
    // NVGcolor nvgRGBAf(float r, float g, float b, float a);
    function nvgRGBAf(r, g, b, a, out = new NVGcolor()) {
        out.r = r;
        out.g = g;
        out.b = b;
        out.a = a;
        return out;
    }
    // Linearly interpolates from color c0 to c1, and returns resulting color value.
    // NVGcolor nvgLerpRGBA(NVGcolor c0, NVGcolor c1, float u);
    function nvgLerpRGBA(c0, c1, u, out = new NVGcolor()) {
        u = nvg__clampf(u, 0.0, 1.0);
        const oneminu = 1.0 - u;
        for (let i = 0; i < 4; ++i) {
            out.rgba[i] = c0.rgba[i] * oneminu + c1.rgba[i] * u;
        }
        return out;
    }
    // Sets transparency of a color value.
    // NVGcolor nvgTransRGBA(NVGcolor c0, unsigned char a);
    function nvgTransRGBA(c, a) {
        c.a = a / 255.0;
        return c;
    }
    // Sets transparency of a color value.
    // NVGcolor nvgTransRGBAf(NVGcolor c0, float a);
    function nvgTransRGBAf(c, a) {
        c.a = a;
        return c;
    }
    // Returns color value specified by hue, saturation and lightness.
    // HSL values are all in range [0..1], alpha will be set to 255.
    // NVGcolor nvgHSL(float h, float s, float l);
    function nvgHSL(h, s, l, out = new NVGcolor()) {
        return nvgHSLA(h, s, l, 255, out);
    }
    // static float nvg__hue(float h, float m1, float m2)
    function nvg__hue(h, m1, m2) {
        if (h < 0)
            h += 1;
        if (h > 1)
            h -= 1;
        if (h < 1.0 / 6.0)
            return m1 + (m2 - m1) * h * 6.0;
        else if (h < 3.0 / 6.0)
            return m2;
        else if (h < 4.0 / 6.0)
            return m1 + (m2 - m1) * (2.0 / 3.0 - h) * 6.0;
        return m1;
    }
    // Returns color value specified by hue, saturation and lightness and alpha.
    // HSL values are all in range [0..1], alpha in range [0..255]
    // NVGcolor nvgHSLA(float h, float s, float l, unsigned char a);
    function nvgHSLA(h, s, l, a, out = new NVGcolor()) {
        h = nvg__modf(h, 1.0);
        if (h < 0.0)
            h += 1.0;
        s = nvg__clampf(s, 0.0, 1.0);
        l = nvg__clampf(l, 0.0, 1.0);
        const m2 = l <= 0.5 ? (l * (1 + s)) : (l + s - l * s);
        const m1 = 2 * l - m2;
        out.r = nvg__clampf(nvg__hue(h + 1.0 / 3.0, m1, m2), 0.0, 1.0);
        out.g = nvg__clampf(nvg__hue(h, m1, m2), 0.0, 1.0);
        out.b = nvg__clampf(nvg__hue(h - 1.0 / 3.0, m1, m2), 0.0, 1.0);
        out.a = a / 255.0;
        return out;
    }
    //
    // State Handling
    //
    // NanoVG contains state which represents how paths will be rendered.
    // The state contains transform, fill and stroke styles, text and font styles,
    // and scissor clipping.
    // Pushes and saves the current render state into a state stack.
    // A matching nvgRestore() must be used to restore the state.
    // void nvgSave(NVGcontext* ctx);
    function nvgSave(ctx) {
        exports.bind.nvgSave(ctx);
    }
    // Pops and restores current render state.
    // void nvgRestore(NVGcontext* ctx);
    function nvgRestore(ctx) {
        exports.bind.nvgRestore(ctx);
    }
    // Resets current render state to default values. Does not affect the render state stack.
    // void nvgReset(NVGcontext* ctx);
    function nvgReset(ctx) {
        exports.bind.nvgReset(ctx);
    }
    //
    // Render styles
    //
    // Fill and stroke render style can be either a solid color or a paint which is a gradient or a pattern.
    // Solid color is simply defined as a color value, different kinds of paints can be created
    // using nvgLinearGradient(), nvgBoxGradient(), nvgRadialGradient() and nvgImagePattern().
    //
    // Current render style can be saved and restored using nvgSave() and nvgRestore().
    // Sets whether to draw antialias for nvgStroke() and nvgFill(). It's enabled by default.
    // void nvgShapeAntiAlias(NVGcontext* ctx, int enabled);
    function nvgShapeAntiAlias(ctx, enabled = true) {
        exports.bind.nvgShapeAntiAlias(ctx, enabled ? 1 : 0);
    }
    // Sets current stroke style to a solid color.
    // void nvgStrokeColor(NVGcontext* ctx, NVGcolor color);
    function nvgStrokeColor(ctx, color) {
        exports.bind.nvgStrokeColor(ctx, color);
    }
    // Sets current stroke style to a paint, which can be a one of the gradients or a pattern.
    // void nvgStrokePaint(NVGcontext* ctx, NVGpaint paint);
    function nvgStrokePaint(ctx, paint) {
        exports.bind.nvgStrokePaint(ctx, paint);
    }
    // Sets current fill style to a solid color.
    // void nvgFillColor(NVGcontext* ctx, NVGcolor color);
    function nvgFillColor(ctx, color) {
        exports.bind.nvgFillColor(ctx, color);
    }
    // Sets current fill style to a paint, which can be a one of the gradients or a pattern.
    // void nvgFillPaint(NVGcontext* ctx, NVGpaint paint);
    function nvgFillPaint(ctx, paint) {
        exports.bind.nvgFillPaint(ctx, paint);
    }
    // Sets the miter limit of the stroke style.
    // Miter limit controls when a sharp corner is beveled.
    // void nvgMiterLimit(NVGcontext* ctx, float limit);
    function nvgMiterLimit(ctx, limit) {
        exports.bind.nvgMiterLimit(ctx, limit);
    }
    // Sets the stroke width of the stroke style.
    // void nvgStrokeWidth(NVGcontext* ctx, float size);
    function nvgStrokeWidth(ctx, size) {
        exports.bind.nvgStrokeWidth(ctx, size);
    }
    // Sets how the end of the line (cap) is drawn,
    // Can be one of: NVG_BUTT (default), NVG_ROUND, NVG_SQUARE.
    // void nvgLineCap(NVGcontext* ctx, int cap);
    function nvgLineCap(ctx, cap) {
        exports.bind.nvgLineCap(ctx, cap);
    }
    // Sets how sharp path corners are drawn.
    // Can be one of NVG_MITER (default), NVG_ROUND, NVG_BEVEL.
    // void nvgLineJoin(NVGcontext* ctx, int join);
    function nvgLineJoin(ctx, join) {
        exports.bind.nvgLineJoin(ctx, join);
    }
    // Sets the transparency applied to all rendered shapes.
    // Already transparent paths will get proportionally more transparent as well.
    // void nvgGlobalAlpha(NVGcontext* ctx, float alpha);
    function nvgGlobalAlpha(ctx, alpha) {
        exports.bind.nvgGlobalAlpha(ctx, alpha);
    }
    //
    // Transforms
    //
    // The paths, gradients, patterns and scissor region are transformed by an transformation
    // matrix at the time when they are passed to the API.
    // The current transformation matrix is a affine matrix:
    //   [sx kx tx]
    //   [ky sy ty]
    //   [ 0  0  1]
    // Where: sx,sy define scaling, kx,ky skewing, and tx,ty translation.
    // The last row is assumed to be 0,0,1 and is not stored.
    //
    // Apart from nvgResetTransform(), each transformation function first creates
    // specific transformation matrix and pre-multiplies the current transformation by it.
    //
    // Current coordinate system (transformation) can be saved and restored using nvgSave() and nvgRestore().
    // Resets current transform to a identity matrix.
    // void nvgResetTransform(NVGcontext* ctx);
    function nvgResetTransform(ctx) {
        exports.bind.nvgResetTransform(ctx);
    }
    // Premultiplies current coordinate system by specified matrix.
    // The parameters are interpreted as matrix as follows:
    //   [a c e]
    //   [b d f]
    //   [0 0 1]
    // void nvgTransform(NVGcontext* ctx, float a, float b, float c, float d, float e, float f);
    function nvgTransform(ctx, a, b, c, d, e, f) {
        exports.bind.nvgTransform(ctx, a, b, c, d, e, f);
    }
    // Translates current coordinate system.
    // void nvgTranslate(NVGcontext* ctx, float x, float y);
    function nvgTranslate(ctx, x, y) {
        exports.bind.nvgTranslate(ctx, x, y);
    }
    // Rotates current coordinate system. Angle is specified in radians.
    // void nvgRotate(NVGcontext* ctx, float angle);
    function nvgRotate(ctx, angle) {
        exports.bind.nvgRotate(ctx, angle);
    }
    // Skews the current coordinate system along X axis. Angle is specified in radians.
    // void nvgSkewX(NVGcontext* ctx, float angle);
    function nvgSkewX(ctx, angle) {
        exports.bind.nvgSkewX(ctx, angle);
    }
    // Skews the current coordinate system along Y axis. Angle is specified in radians.
    // void nvgSkewY(NVGcontext* ctx, float angle);
    function nvgSkewY(ctx, angle) {
        exports.bind.nvgSkewY(ctx, angle);
    }
    // Scales the current coordinate system.
    // void nvgScale(NVGcontext* ctx, float x, float y);
    function nvgScale(ctx, x, y) {
        exports.bind.nvgScale(ctx, x, y);
    }
    // Stores the top part (a-f) of the current transformation matrix in to the specified buffer.
    //   [a c e]
    //   [b d f]
    //   [0 0 1]
    // There should be space for 6 floats in the return buffer for the values a-f.
    // void nvgCurrentTransform(NVGcontext* ctx, float* xform);
    function nvgCurrentTransform(ctx, xform) {
        exports.bind.nvgCurrentTransform(ctx, xform);
    }
    // The following functions can be used to make calculations on 2x3 transformation matrices.
    // A 2x3 matrix is represented as float[6].
    // Sets the transform to identity matrix.
    // void nvgTransformIdentity(float* dst);
    function nvgTransformIdentity(dst) {
        dst[0] = 1.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        dst[3] = 1.0;
        dst[4] = 0.0;
        dst[5] = 0.0;
    }
    // Sets the transform to translation matrix matrix.
    // void nvgTransformTranslate(float* dst, float tx, float ty);
    function nvgTransformTranslate(dst, tx, ty) {
        dst[0] = 1.0;
        dst[1] = 0.0;
        dst[2] = 0.0;
        dst[3] = 1.0;
        dst[4] = tx;
        dst[5] = ty;
    }
    // Sets the transform to scale matrix.
    // void nvgTransformScale(float* dst, float sx, float sy);
    function nvgTransformScale(dst, sx, sy) {
        dst[0] = sx;
        dst[1] = 0.0;
        dst[2] = 0.0;
        dst[3] = sy;
        dst[4] = 0.0;
        dst[5] = 0.0;
    }
    // Sets the transform to rotate matrix. Angle is specified in radians.
    // void nvgTransformRotate(float* dst, float a);
    function nvgTransformRotate(dst, a) {
        const cs = Math.cos(a), sn = Math.sin(a);
        dst[0] = cs;
        dst[1] = sn;
        dst[2] = -sn;
        dst[3] = cs;
        dst[4] = 0.0;
        dst[5] = 0.0;
    }
    // Sets the transform to skew-x matrix. Angle is specified in radians.
    // void nvgTransformSkewX(float* dst, float a);
    function nvgTransformSkewX(dst, a) {
        dst[0] = 1.0;
        dst[1] = 0.0;
        dst[2] = Math.tan(a);
        dst[3] = 1.0;
        dst[4] = 0.0;
        dst[5] = 0.0;
    }
    // Sets the transform to skew-y matrix. Angle is specified in radians.
    // void nvgTransformSkewY(float* dst, float a);
    function nvgTransformSkewY(dst, a) {
        dst[0] = 1.0;
        dst[1] = Math.tan(a);
        dst[2] = 0.0;
        dst[3] = 1.0;
        dst[4] = 0.0;
        dst[5] = 0.0;
    }
    // Sets the transform to the result of multiplication of two transforms, of A = A*B.
    // void nvgTransformMultiply(float* dst, const float* src);
    function nvgTransformMultiply(dst, src) {
        const t0 = dst[0] * src[0] + dst[1] * src[2];
        const t2 = dst[2] * src[0] + dst[3] * src[2];
        const t4 = dst[4] * src[0] + dst[5] * src[2] + src[4];
        dst[1] = dst[0] * src[1] + dst[1] * src[3];
        dst[3] = dst[2] * src[1] + dst[3] * src[3];
        dst[5] = dst[4] * src[1] + dst[5] * src[3] + src[5];
        dst[0] = t0;
        dst[2] = t2;
        dst[4] = t4;
    }
    // Sets the transform to the result of multiplication of two transforms, of A = B*A.
    // void nvgTransformPremultiply(float* dst, const float* src);
    const s2 = new Float32Array(6); // float s2[6];
    function nvgTransformPremultiply(dst, src) {
        s2.set(src); // memcpy(s2, src, sizeof(float)*6);
        nvgTransformMultiply(s2, dst);
        dst.set(s2); // memcpy(dst, s2, sizeof(float)*6);
    }
    // Sets the destination to inverse of specified transform.
    // Returns 1 if the inverse could be calculated, else 0.
    // int nvgTransformInverse(float* dst, const float* src);
    function nvgTransformInverse(dst, src) {
        const det = src[0] * src[3] - src[2] * src[1];
        if (det > -1e-6 && det < 1e-6) {
            nvgTransformIdentity(dst);
            return 0;
        }
        const invdet = 1.0 / det;
        dst[0] = src[3] * invdet;
        dst[2] = -src[2] * invdet;
        dst[4] = (src[2] * src[5] - src[3] * src[4]) * invdet;
        dst[1] = -src[1] * invdet;
        dst[3] = src[0] * invdet;
        dst[5] = (src[1] * src[4] - src[0] * src[5]) * invdet;
        return 1;
    }
    // Transform a point by given transform.
    // void nvgTransformPoint(float* dstx, float* dsty, const float* xform, float srcx, float srcy);
    function nvgTransformPoint(dst, xform, src) {
        const srcx = src[0], srcy = src[1];
        dst[0] = srcx * xform[0] + srcy * xform[2] + xform[4];
        dst[1] = srcx * xform[1] + srcy * xform[3] + xform[5];
    }
    // Converts degrees to radians and vice versa.
    // float nvgDegToRad(float deg);
    function nvgDegToRad(deg) {
        return deg / 180.0 * NVG_PI;
    }
    // float nvgRadToDeg(float rad);
    function nvgRadToDeg(rad) {
        return rad / NVG_PI * 180.0;
    }
    //
    // Images
    //
    // NanoVG allows you to load jpg, png, psd, tga, pic and gif files to be used for rendering.
    // In addition you can upload your own image. The image loading is provided by stb_image.
    // The parameter imageFlags is combination of flags defined in NVGimageFlags.
    // Creates image by loading it from the disk from specified file name.
    // Returns handle to the image.
    // int nvgCreateImage(NVGcontext* ctx, const char* filename, int imageFlags);
    function nvgCreateImage(ctx, filename, imageFlags) {
        return nvgCreateImage(ctx, filename, imageFlags);
    }
    // Creates image by loading it from the specified chunk of memory.
    // Returns handle to the image.
    // int nvgCreateImageMem(NVGcontext* ctx, int imageFlags, unsigned char* data, int ndata);
    function nvgCreateImageMem(ctx, imageFlags, data) {
        return exports.bind.nvgCreateImageMem(ctx, imageFlags, data);
    }
    // Creates image from specified image data.
    // Returns handle to the image.
    // int nvgCreateImageRGBA(NVGcontext* ctx, int w, int h, int imageFlags, const unsigned char* data);
    function nvgCreateImageRGBA(ctx, w, h, imageFlags, data) {
        return exports.bind.nvgCreateImageRGBA(ctx, w, h, imageFlags, data);
    }
    // Updates image data specified by image handle.
    // void nvgUpdateImage(NVGcontext* ctx, int image, const unsigned char* data);
    function nvgUpdateImage(ctx, image, data) {
        exports.bind.nvgUpdateImage(ctx, image, data);
    }
    // Returns the dimensions of a created image.
    // void nvgImageSize(NVGcontext* ctx, int image, int* w, int* h);
    function nvgImageSize(ctx, image, w, h) {
        exports.bind.nvgImageSize(ctx, image, w, h);
    }
    // Deletes created image.
    // void nvgDeleteImage(NVGcontext* ctx, int image);
    function nvgDeleteImage(ctx, image) {
        exports.bind.nvgDeleteImage(ctx, image);
    }
    //
    // Paints
    //
    // NanoVG supports four types of paints: linear gradient, box gradient, radial gradient and image pattern.
    // These can be used as paints for strokes and fills.
    // Creates and returns a linear gradient. Parameters (sx,sy)-(ex,ey) specify the start and end coordinates
    // of the linear gradient, icol specifies the start color and ocol the end color.
    // The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
    // NVGpaint nvgLinearGradient(NVGcontext* ctx, float sx, float sy, float ex, float ey, NVGcolor icol, NVGcolor ocol);
    function nvgLinearGradient(ctx, sx, sy, ex, ey, icol, ocol, out = new NVGpaint()) {
        exports.bind.nvgLinearGradient(ctx, sx, sy, ex, ey, icol, ocol, out);
        return out;
    }
    // Creates and returns a box gradient. Box gradient is a feathered rounded rectangle, it is useful for rendering
    // drop shadows or highlights for boxes. Parameters (x,y) define the top-left corner of the rectangle,
    // (w,h) define the size of the rectangle, r defines the corner radius, and f feather. Feather defines how blurry
    // the border of the rectangle is. Parameter icol specifies the inner color and ocol the outer color of the gradient.
    // The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
    // NVGpaint nvgBoxGradient(NVGcontext* ctx, float x, float y, float w, float h, float r, float f, NVGcolor icol, NVGcolor ocol);
    function nvgBoxGradient(ctx, x, y, w, h, r, f, icol, ocol, out = new NVGpaint()) {
        exports.bind.nvgBoxGradient(ctx, x, y, w, h, r, f, icol, ocol, out);
        return out;
    }
    // Creates and returns a radial gradient. Parameters (cx,cy) specify the center, inr and outr specify
    // the inner and outer radius of the gradient, icol specifies the start color and ocol the end color.
    // The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
    // NVGpaint nvgRadialGradient(NVGcontext* ctx, float cx, float cy, float inr, float outr, NVGcolor icol, NVGcolor ocol);
    function nvgRadialGradient(ctx, cx, cy, inr, outr, icol, ocol, out = new NVGpaint()) {
        exports.bind.nvgRadialGradient(ctx, cx, cy, inr, outr, icol, ocol, out);
        return out;
    }
    // Creates and returns an image patter. Parameters (ox,oy) specify the left-top location of the image pattern,
    // (ex,ey) the size of one image, angle rotation around the top-left corner, image is handle to the image to render.
    // The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
    // NVGpaint nvgImagePattern(NVGcontext* ctx, float ox, float oy, float ex, float ey, float angle, int image, float alpha);
    function nvgImagePattern(ctx, ox, oy, ex, ey, angle, image, alpha, out = new NVGpaint()) {
        exports.bind.nvgImagePattern(ctx, ox, oy, ex, ey, angle, image, alpha, out);
        return out;
    }
    //
    // Scissoring
    //
    // Scissoring allows you to clip the rendering into a rectangle. This is useful for various
    // user interface cases like rendering a text edit or a timeline.
    // Sets the current scissor rectangle.
    // The scissor rectangle is transformed by the current transform.
    // void nvgScissor(NVGcontext* ctx, float x, float y, float w, float h);
    function nvgScissor(ctx, x, y, w, h) {
        exports.bind.nvgScissor(ctx, x, y, w, h);
    }
    // Intersects current scissor rectangle with the specified rectangle.
    // The scissor rectangle is transformed by the current transform.
    // Note: in case the rotation of previous scissor rect differs from
    // the current one, the intersection will be done between the specified
    // rectangle and the previous scissor rectangle transformed in the current
    // transform space. The resulting shape is always rectangle.
    // void nvgIntersectScissor(NVGcontext* ctx, float x, float y, float w, float h);
    function nvgIntersectScissor(ctx, x, y, w, h) {
        exports.bind.nvgIntersectScissor(ctx, x, y, w, h);
    }
    // Reset and disables scissoring.
    // void nvgResetScissor(NVGcontext* ctx);
    function nvgResetScissor(ctx) {
        exports.bind.nvgResetScissor(ctx);
    }
    //
    // Paths
    //
    // Drawing a new shape starts with nvgBeginPath(), it clears all the currently defined paths.
    // Then you define one or more paths and sub-paths which describe the shape. The are functions
    // to draw common shapes like rectangles and circles, and lower level step-by-step functions,
    // which allow to define a path curve by curve.
    //
    // NanoVG uses even-odd fill rule to draw the shapes. Solid shapes should have counter clockwise
    // winding and holes should have counter clockwise order. To specify winding of a path you can
    // call nvgPathWinding(). This is useful especially for the common shapes, which are drawn CCW.
    //
    // Finally you can fill the path using current fill style by calling nvgFill(), and stroke it
    // with current stroke style by calling nvgStroke().
    //
    // The curve segments and sub-paths are transformed by the current transform.
    // Clears the current path and sub-paths.
    // void nvgBeginPath(NVGcontext* ctx);
    function nvgBeginPath(ctx) {
        exports.bind.nvgBeginPath(ctx);
    }
    // Starts new sub-path with specified point as first point.
    // void nvgMoveTo(NVGcontext* ctx, float x, float y);
    function nvgMoveTo(ctx, x, y) {
        exports.bind.nvgMoveTo(ctx, x, y);
    }
    // Adds line segment from the last point in the path to the specified point.
    // void nvgLineTo(NVGcontext* ctx, float x, float y);
    function nvgLineTo(ctx, x, y) {
        exports.bind.nvgLineTo(ctx, x, y);
    }
    // Adds cubic bezier segment from last point in the path via two control points to the specified point.
    // void nvgBezierTo(NVGcontext* ctx, float c1x, float c1y, float c2x, float c2y, float x, float y);
    function nvgBezierTo(ctx, c1x, c1y, c2x, c2y, x, y) {
        exports.bind.nvgBezierTo(ctx, c1x, c1y, c2x, c2y, x, y);
    }
    // Adds quadratic bezier segment from last point in the path via a control point to the specified point.
    // void nvgQuadTo(NVGcontext* ctx, float cx, float cy, float x, float y);
    function nvgQuadTo(ctx, cx, cy, x, y) {
        exports.bind.nvgQuadTo(ctx, cx, cy, x, y);
    }
    // Adds an arc segment at the corner defined by the last path point, and two specified points.
    // void nvgArcTo(NVGcontext* ctx, float x1, float y1, float x2, float y2, float radius);
    function nvgArcTo(ctx, x1, y1, x2, y2, radius) {
        exports.bind.nvgArcTo(ctx, x1, y1, x2, y2, radius);
    }
    // Closes current sub-path with a line segment.
    // void nvgClosePath(NVGcontext* ctx);
    function nvgClosePath(ctx) {
        exports.bind.nvgClosePath(ctx);
    }
    // Sets the current sub-path winding, see NVGwinding and NVGsolidity.
    // void nvgPathWinding(NVGcontext* ctx, int dir);
    function nvgPathWinding(ctx, dir) {
        exports.bind.nvgPathWinding(ctx, dir);
    }
    // Creates new circle arc shaped sub-path. The arc center is at cx,cy, the arc radius is r,
    // and the arc is drawn from angle a0 to a1, and swept in direction dir (NVG_CCW, or NVG_CW).
    // Angles are specified in radians.
    // void nvgArc(NVGcontext* ctx, float cx, float cy, float r, float a0, float a1, int dir);
    function nvgArc(ctx, cx, cy, r, a0, a1, dir) {
        exports.bind.nvgArc(ctx, cx, cy, r, a0, a1, dir);
    }
    // Creates new rectangle shaped sub-path.
    // void nvgRect(NVGcontext* ctx, float x, float y, float w, float h);
    function nvgRect(ctx, x, y, w, h) {
        exports.bind.nvgRect(ctx, x, y, w, h);
    }
    // Creates new rounded rectangle shaped sub-path.
    // void nvgRoundedRect(NVGcontext* ctx, float x, float y, float w, float h, float r);
    function nvgRoundedRect(ctx, x, y, w, h, r) {
        exports.bind.nvgRoundedRect(ctx, x, y, w, h, r);
    }
    // Creates new rounded rectangle shaped sub-path with varying radii for each corner.
    // void nvgRoundedRectVarying(NVGcontext* ctx, float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft);
    function nvgRoundedRectVarying(ctx, x, y, w, h, radTopLeft, radTopRight, radBottomRight, radBottomLeft) {
        exports.bind.nvgRoundedRectVarying(ctx, x, y, w, h, radTopLeft, radTopRight, radBottomRight, radBottomLeft);
    }
    // Creates new ellipse shaped sub-path.
    // void nvgEllipse(NVGcontext* ctx, float cx, float cy, float rx, float ry);
    function nvgEllipse(ctx, cx, cy, rx, ry) {
        exports.bind.nvgEllipse(ctx, cx, cy, rx, ry);
    }
    // Creates new circle shaped sub-path.
    // void nvgCircle(NVGcontext* ctx, float cx, float cy, float r);
    function nvgCircle(ctx, cx, cy, r) {
        exports.bind.nvgCircle(ctx, cx, cy, r);
    }
    // Fills the current path with current fill style.
    // void nvgFill(NVGcontext* ctx);
    function nvgFill(ctx) {
        exports.bind.nvgFill(ctx);
    }
    // Fills the current path with current stroke style.
    // void nvgStroke(NVGcontext* ctx);
    function nvgStroke(ctx) {
        exports.bind.nvgStroke(ctx);
    }
    //
    // Text
    //
    // NanoVG allows you to load .ttf files and use the font to render text.
    //
    // The appearance of the text can be defined by setting the current text style
    // and by specifying the fill color. Common text and font settings such as
    // font size, letter spacing and text align are supported. Font blur allows you
    // to create simple text effects such as drop shadows.
    //
    // At render time the font face can be set based on the font handles or name.
    //
    // Font measure functions return values in local space, the calculations are
    // carried in the same resolution as the final rendering. This is done because
    // the text glyph positions are snapped to the nearest pixels sharp rendering.
    //
    // The local space means that values are not rotated or scale as per the current
    // transformation. For example if you set font size to 12, which would mean that
    // line height is 16, then regardless of the current scaling and rotation, the
    // returned line height is always 16. Some measures may vary because of the scaling
    // since aforementioned pixel snapping.
    //
    // While this may sound a little odd, the setup allows you to always render the
    // same way regardless of scaling. I.e. following works regardless of scaling:
    //
    //    const char* txt = "Text me up.";
    //    nvgTextBounds(vg, x,y, txt, NULL, bounds);
    //    nvgBeginPath(vg);
    //    nvgRoundedRect(vg, bounds[0],bounds[1], bounds[2]-bounds[0], bounds[3]-bounds[1]);
    //    nvgFill(vg);
    //
    // Note: currently only solid color fill is supported for text.
    // Creates font by loading it from the disk from specified file name.
    // Returns handle to the font.
    // int nvgCreateFont(NVGcontext* ctx, const char* name, const char* filename);
    function nvgCreateFont(ctx, name, filename) {
        return exports.bind.nvgCreateFont(ctx, name, filename);
    }
    // Creates font by loading it from the specified memory chunk.
    // Returns handle to the font.
    // int nvgCreateFontMem(NVGcontext* ctx, const char* name, unsigned char* data, int ndata, int freeData);
    function nvgCreateFontMem(ctx, name, data) {
        return exports.bind.nvgCreateFontMem(ctx, name, data);
    }
    // Finds a loaded font of specified name, and returns handle to it, or -1 if the font is not found.
    // int nvgFindFont(NVGcontext* ctx, const char* name);
    function nvgFindFont(ctx, name) {
        return exports.bind.nvgFindFont(ctx, name);
    }
    // Adds a fallback font by handle.
    // int nvgAddFallbackFontId(NVGcontext* ctx, int baseFont, int fallbackFont);
    function nvgAddFallbackFontId(ctx, baseFont, fallbackFont) {
        return exports.bind.nvgAddFallbackFontId(ctx, baseFont, fallbackFont);
    }
    // Adds a fallback font by name.
    // int nvgAddFallbackFont(NVGcontext* ctx, const char* baseFont, const char* fallbackFont);
    function nvgAddFallbackFont(ctx, baseFont, fallbackFont) {
        return exports.bind.nvgAddFallbackFont(ctx, baseFont, fallbackFont);
    }
    // Sets the font size of current text style.
    // void nvgFontSize(NVGcontext* ctx, float size);
    function nvgFontSize(ctx, size) {
        exports.bind.nvgFontSize(ctx, size);
    }
    // Sets the blur of current text style.
    // void nvgFontBlur(NVGcontext* ctx, float blur);
    function nvgFontBlur(ctx, blur) {
        exports.bind.nvgFontBlur(ctx, blur);
    }
    // Sets the letter spacing of current text style.
    // void nvgTextLetterSpacing(NVGcontext* ctx, float spacing);
    function nvgTextLetterSpacing(ctx, spacing) {
        exports.bind.nvgTextLetterSpacing(ctx, spacing);
    }
    // Sets the proportional line height of current text style. The line height is specified as multiple of font size.
    // void nvgTextLineHeight(NVGcontext* ctx, float lineHeight);
    function nvgTextLineHeight(ctx, lineHeight) {
        exports.bind.nvgTextLineHeight(ctx, lineHeight);
    }
    // Sets the text align of current text style, see NVGalign for options.
    // void nvgTextAlign(NVGcontext* ctx, int align);
    function nvgTextAlign(ctx, align) {
        exports.bind.nvgTextAlign(ctx, align);
    }
    // Sets the font face based on specified id of current text style.
    // void nvgFontFaceId(NVGcontext* ctx, int font);
    function nvgFontFaceId(ctx, font) {
        exports.bind.nvgFontFaceId(ctx, font);
    }
    // Sets the font face based on specified name of current text style.
    // void nvgFontFace(NVGcontext* ctx, const char* font);
    function nvgFontFace(ctx, font) {
        exports.bind.nvgFontFace(ctx, font);
    }
    // Draws text string at specified location. If end is specified only the sub-string up to the end is drawn.
    // float nvgText(NVGcontext* ctx, float x, float y, const char* string, const char* end);
    function nvgText(ctx, x, y, string, end = null) {
        return exports.bind.nvgText(ctx, x, y, string, end === null ? 0 : end);
    }
    // Draws multi-line text string at specified location wrapped at the specified width. If end is specified only the sub-string up to the end is drawn.
    // White space is stripped at the beginning of the rows, the text is split at word boundaries or when new-line characters are encountered.
    // Words longer than the max width are slit at nearest character (i.e. no hyphenation).
    // void nvgTextBox(NVGcontext* ctx, float x, float y, float breakRowWidth, const char* string, const char* end);
    function nvgTextBox(ctx, x, y, breakRowWidth, string, end = null) {
        exports.bind.nvgTextBox(ctx, x, y, breakRowWidth, string, end === null ? 0 : end);
    }
    // Measures the specified text string. Parameter bounds should be a pointer to float[4],
    // if the bounding box of the text should be returned. The bounds value are [xmin,ymin, xmax,ymax]
    // Returns the horizontal advance of the measured text (i.e. where the next character should drawn).
    // Measured values are returned in local coordinate space.
    // float nvgTextBounds(NVGcontext* ctx, float x, float y, const char* string, const char* end, float* bounds);
    function nvgTextBounds(ctx, x, y, string, end = null, bounds = null) {
        return exports.bind.nvgTextBounds(ctx, x, y, string, end === null ? 0 : end, bounds);
    }
    // Measures the specified multi-text string. Parameter bounds should be a pointer to float[4],
    // if the bounding box of the text should be returned. The bounds value are [xmin,ymin, xmax,ymax]
    // Measured values are returned in local coordinate space.
    // void nvgTextBoxBounds(NVGcontext* ctx, float x, float y, float breakRowWidth, const char* string, const char* end, float* bounds);
    function nvgTextBoxBounds(ctx, x, y, breakRowWidth, string, end, bounds) {
        exports.bind.nvgTextBoxBounds(ctx, x, y, breakRowWidth, string, end === null ? 0 : end, bounds);
    }
    // Calculates the glyph x positions of the specified text. If end is specified only the sub-string will be used.
    // Measured values are returned in local coordinate space.
    // int nvgTextGlyphPositions(NVGcontext* ctx, float x, float y, const char* string, const char* end, NVGglyphPosition* positions, int maxPositions);
    function nvgTextGlyphPositions(ctx, x, y, string, end, positions) {
        return exports.bind.nvgTextGlyphPositions(ctx, x, y, string, end === null ? 0 : end, positions, positions.length);
    }
    // Returns the vertical metrics based on the current text style.
    // Measured values are returned in local coordinate space.
    // void nvgTextMetrics(NVGcontext* ctx, float* ascender, float* descender, float* lineh);
    function nvgTextMetrics(ctx, ascender, descender, lineh) {
        exports.bind.nvgTextMetrics(ctx, ascender, descender, lineh);
    }
    // Breaks the specified text into lines. If end is specified only the sub-string will be used.
    // White space is stripped at the beginning of the rows, the text is split at word boundaries or when new-line characters are encountered.
    // Words longer than the max width are slit at nearest character (i.e. no hyphenation).
    // int nvgTextBreakLines(NVGcontext* ctx, const char* string, const char* end, float breakRowWidth, NVGtextRow* rows, int maxRows);
    function nvgTextBreakLines(ctx, string, end, breakRowWidth, rows) {
        return exports.bind.nvgTextBreakLines(ctx, string, end === null ? 0 : end, breakRowWidth, rows, rows.length);
    }
    //
    // Internal Render API
    //
    // export enum NVGtexture {
    //   ALPHA = 0x01,
    //   RGBA = 0x02,
    // }
    // struct NVGscissor {
    //   float xform[6];
    //   float extent[2];
    // };
    // typedef struct NVGscissor NVGscissor;
    // export class NVGscissor implements Bind.NVGscissor {
    //   xform: Float32Array;
    //   extent: Float32Array;
    //   constructor(public _array = new Float32Array(8)) {
    //     this.xform = new Float32Array(this._array.subarray(0, 6));
    //     this.extent = new Float32Array(this._array.subarray(6, 8));
    //   }
    // }
    // struct NVGvertex {
    //   float x,y,u,v;
    // };
    // typedef struct NVGvertex NVGvertex;
    // export class NVGvertex implements Bind.NVGvertex {
    //   constructor(public xyuv = new Float32Array(4)) {
    //   }
    //   get x(): number { return this.xyuv[0]; } set x(value: number) { this.xyuv[0] = value; }
    //   get y(): number { return this.xyuv[1]; } set y(value: number) { this.xyuv[1] = value; }
    //   get u(): number { return this.xyuv[2]; } set u(value: number) { this.xyuv[2] = value; }
    //   get v(): number { return this.xyuv[3]; } set v(value: number) { this.xyuv[3] = value; }
    // }
    // struct NVGpath {
    //   int first;
    //   int count;
    //   unsigned char closed;
    //   int nbevel;
    //   NVGvertex* fill;
    //   int nfill;
    //   NVGvertex* stroke;
    //   int nstroke;
    //   int winding;
    //   int convex;
    // };
    // typedef struct NVGpath NVGpath;
    // export class NVGpath implements Bind.NVGpath {
    //   first: number = 0;
    //   count: number = 0;
    //   closed: boolean = false;
    //   nbevel: number = 0;
    //   fill: NVGvertex[] = []; // NVGvertex* fill;
    //   nfill: number = 0;
    //   stroke: NVGvertex[] = []; // NVGvertex* stroke;
    //   nstroke: number = 0;
    //   winding: number = 0;
    //   convex: number = 0;
    // }
    // struct NVGparams {
    //   void* userPtr;
    //   int edgeAntiAlias;
    //   int (*renderCreate)(void* uptr);
    //   int (*renderCreateTexture)(void* uptr, int type, int w, int h, int imageFlags, const unsigned char* data);
    //   int (*renderDeleteTexture)(void* uptr, int image);
    //   int (*renderUpdateTexture)(void* uptr, int image, int x, int y, int w, int h, const unsigned char* data);
    //   int (*renderGetTextureSize)(void* uptr, int image, int* w, int* h);
    //   void (*renderViewport)(void* uptr, float width, float height, float devicePixelRatio);
    //   void (*renderCancel)(void* uptr);
    //   void (*renderFlush)(void* uptr);
    //   void (*renderFill)(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe, const float* bounds, const NVGpath* paths, int npaths);
    //   void (*renderStroke)(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe, float strokeWidth, const NVGpath* paths, int npaths);
    //   void (*renderTriangles)(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, const NVGvertex* verts, int nverts);
    //   void (*renderDelete)(void* uptr);
    // };
    // typedef struct NVGparams NVGparams;
    // export class NVGparams implements Bind.NVGparams {
    //   userPtr: any = null;
    //   edgeAntiAlias: boolean = false;
    //   renderCreate!: (uptr: any) => number;
    //   renderCreateTexture!: (uptr: any, type: NVGtexture, w: number, h: number, imageFlags: NVGimageFlags, data: ArrayBufferView) => number;
    //   renderDeleteTexture!: (uptr: any, image: number) => number;
    //   renderUpdateTexture!: (uptr: any, image: number, x: number, y: number, w: number, h: number, data: ArrayBufferView) => number;
    //   renderGetTextureSize!: (uptr: any, image: number, w: [number], h: [number]) => number;
    //   renderViewport!: (uptr: any, width: number, height: number, devidePixelRatio: number) => void;
    //   renderCancel!: (uptr: any) => void;
    //   renderFlush!: (uptr: any) => void;
    //   renderFill!: (uptr: any, paint: Bind.reference_NVGpaint, compositeOperation: Bind.reference_NVGcompositeOperationState, scissor: Bind.reference_NVGscissor, fringe: number, bounds: Float32Array, paths: Bind.NVGpath[], npaths: number) => void;
    //   renderStroke!: (uptr: any, paint: Bind.reference_NVGpaint, compositeOperation: Bind.reference_NVGcompositeOperationState, scissor: Bind.reference_NVGscissor, fringe: number, strokeWidth: number, paths: ArrayBufferView, npaths: number) => void;
    //   renderTriangles!: (uptr: any, paint: Bind.reference_NVGpaint, compositeOperation: Bind.reference_NVGcompositeOperationState, scissor: Bind.reference_NVGscissor, verts: Bind.NVGvertex[], nverts: number) => void;
    //   renderDelete!: (uptr: any) => void;
    // }
    // Constructor and destructor, called by the render back-end.
    // NVGcontext* nvgCreateInternal(NVGparams* params);
    // export function nvgCreateInternal(params: NVGparams): NVGcontext {
    //   return bind.nvgCreateInternal(params);
    // }
    // void nvgDeleteInternal(NVGcontext* ctx);
    // export function nvgDeleteInternal(ctx: NVGcontext): void {
    //   bind.nvgDeleteInternal(ctx);
    // }
    // NVGparams* nvgInternalParams(NVGcontext* ctx);
    // export function nvgInternalParams(ctx: NVGcontext): NVGparams {
    //   return bind.nvgInternalParams(ctx);
    // }
    // Debug function to dump cached path data.
    // void nvgDebugDumpPathCache(NVGcontext* ctx);
    function nvgDebugDumpPathCache(ctx) {
        exports.bind.nvgDebugDumpPathCache(ctx);
    }
    (function (NVGcreateFlags) {
        // Flag indicating if geometry based anti-aliasing is used (may not be needed when using MSAA).
        NVGcreateFlags[NVGcreateFlags["ANTIALIAS"] = 1] = "ANTIALIAS";
        // Flag indicating if strokes should be drawn using stencil buffer. The rendering will be a little
        // slower, but path overlaps (i.e. self-intersecting or sharp turns) will be drawn just once.
        NVGcreateFlags[NVGcreateFlags["STENCIL_STROKES"] = 2] = "STENCIL_STROKES";
        // Flag indicating that additional debug checks are done.
        NVGcreateFlags[NVGcreateFlags["DEBUG"] = 4] = "DEBUG";
    })(exports.CreateFlags || (exports.CreateFlags = {}));
    // NVGcontext* nvgCreateGLES2(int flags);
    function nvgCreateWebGL(gl, flags) {
        return exports.bind.nvgCreateWebGL(gl, flags);
    }
    // void nvgDeleteGLES2(NVGcontext* ctx);
    function nvgDeleteWebGL(ctx) {
        exports.bind.nvgDeleteWebGL(ctx);
    }
    // int nvglCreateImageFromHandleGLES2(NVGcontext* ctx, GLuint textureId, int w, int h, int flags);
    function nvglCreateImageFromHandleWebGL(ctx, textureId, w, h, flags) {
        return exports.bind.nvglCreateImageFromHandleWebGL(ctx, textureId, w, h, flags);
    }
    // GLuint nvglImageHandleGLES2(NVGcontext* ctx, int image);
    function nvglImageHandleWebGL(ctx, image) {
        return exports.bind.nvglImageHandleWebGL(ctx, image);
    }
    // void nvgluBindFramebuffer(NVGLUframebuffer* fb);
    function nvgluBindFramebuffer(fb) {
        return exports.bind.nvgluBindFramebuffer(fb);
    }
    // NVGLUframebuffer* nvgluCreateFramebuffer(NVGcontext* ctx, int w, int h, int imageFlags);
    function nvgluCreateFramebuffer(ctx, w, h, imageFlags) {
        return exports.bind.nvgluCreateFramebuffer(ctx, w, h, imageFlags);
    }
    // void nvgluDeleteFramebuffer(NVGLUframebuffer* fb);
    function nvgluDeleteFramebuffer(fb) {
        return exports.bind.nvgluDeleteFramebuffer(fb);
    }
    class Context {
        constructor(gl, flags) {
            this.gl = gl;
            this.ctx = nvgCreateWebGL(gl, flags);
        }
        delete() {
            nvgDeleteWebGL(this.ctx);
            delete this.ctx;
            this.gl = null;
        }
        beginFrame(windowWidth, windowHeight, devicePixelRatio) { nvgBeginFrame(this.ctx, windowWidth, windowHeight, devicePixelRatio); }
        cancelFrame() { nvgCancelFrame(this.ctx); }
        endFrame() { nvgEndFrame(this.ctx); }
        globalCompositeOperation(op) { nvgGlobalCompositeOperation(this.ctx, op); }
        globalCompositeBlendFunc(sfactor, dfactor) { nvgGlobalCompositeBlendFunc(this.ctx, sfactor, dfactor); }
        globalCompositeBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) { nvgGlobalCompositeBlendFuncSeparate(this.ctx, srcRGB, dstRGB, srcAlpha, dstAlpha); }
        RGB(r, g, b, out = new NVGcolor()) { return nvgRGB(r, g, b, out); }
        RGBf(r, g, b, out = new NVGcolor()) { return nvgRGBf(r, g, b, out); }
        RGBA(r, g, b, a, out = new NVGcolor()) { return nvgRGBA(r, g, b, a, out); }
        RGBAf(r, g, b, a, out = new NVGcolor()) { return nvgRGBAf(r, g, b, a, out); }
        lerpRGBA(c0, c1, u, out = new NVGcolor()) { return nvgLerpRGBA(c0, c1, u, out); }
        transRGBA(c, a) { return nvgTransRGBA(c, a); }
        transRGBAf(c, a) { return nvgTransRGBAf(c, a); }
        HSL(h, s, l, out = new NVGcolor()) { return nvgHSL(h, s, l, out); }
        HSLA(h, s, l, a, out = new NVGcolor()) { return nvgHSLA(h, s, l, a, out); }
        save() { nvgSave(this.ctx); }
        restore() { nvgRestore(this.ctx); }
        reset() { nvgReset(this.ctx); }
        shapeAntiAlias(enabled = true) { nvgShapeAntiAlias(this.ctx, enabled); }
        strokeColor(color) { nvgStrokeColor(this.ctx, color); }
        strokePaint(paint) { nvgStrokePaint(this.ctx, paint); }
        fillColor(color) { nvgFillColor(this.ctx, color); }
        fillPaint(paint) { nvgFillPaint(this.ctx, paint); }
        miterLimit(limit) { nvgMiterLimit(this.ctx, limit); }
        strokeWidth(size) { nvgStrokeWidth(this.ctx, size); }
        lineCap(cap) { nvgLineCap(this.ctx, cap); }
        lineJoin(join) { nvgLineJoin(this.ctx, join); }
        globalAlpha(alpha) { nvgGlobalAlpha(this.ctx, alpha); }
        resetTransform() { nvgResetTransform(this.ctx); }
        transform(a, b, c, d, e, f) { nvgTransform(this.ctx, a, b, c, d, e, f); }
        translate(x, y) { nvgTranslate(this.ctx, x, y); }
        rotate(angle) { nvgRotate(this.ctx, angle); }
        skewX(angle) { nvgSkewX(this.ctx, angle); }
        skewY(angle) { nvgSkewY(this.ctx, angle); }
        scale(x, y) { nvgScale(this.ctx, x, y); }
        currentTransform(xform) { nvgCurrentTransform(this.ctx, xform); }
        transformIdentity(dst) { nvgTransformIdentity(dst); }
        transformTranslate(dst, tx, ty) { nvgTransformTranslate(dst, tx, ty); }
        transformScale(dst, sx, sy) { nvgTransformScale(dst, sx, sy); }
        transformRotate(dst, a) { nvgTransformRotate(dst, a); }
        transformSkewX(dst, a) { nvgTransformSkewX(dst, a); }
        transformSkewY(dst, a) { nvgTransformSkewY(dst, a); }
        transformMultiply(dst, src) { nvgTransformMultiply(dst, src); }
        transformPremultiply(dst, src) { nvgTransformPremultiply(dst, src); }
        transformInverse(dst, src) { return nvgTransformInverse(dst, src); }
        transformPoint(dst, xform, src) { nvgTransformPoint(dst, xform, src); }
        degToRad(deg) { return nvgDegToRad(deg); }
        radToDeg(rad) { return nvgRadToDeg(rad); }
        createImage(filename, imageFlags) { return nvgCreateImage(this.ctx, filename, imageFlags); }
        createImageMem(imageFlags, data) { return nvgCreateImageMem(this.ctx, imageFlags, data); }
        createImageRGBA(w, h, imageFlags, data) { return nvgCreateImageRGBA(this.ctx, w, h, imageFlags, data); }
        updateImage(image, data) { nvgUpdateImage(this.ctx, image, data); }
        imageSize(image, w, h) { nvgImageSize(this.ctx, image, w, h); }
        deleteImage(image) { nvgDeleteImage(this.ctx, image); }
        linearGradient(sx, sy, ex, ey, icol, ocol, out = new NVGpaint()) { return nvgLinearGradient(this.ctx, sx, sy, ex, ey, icol, ocol, out); }
        boxGradient(x, y, w, h, r, f, icol, ocol, out = new NVGpaint()) { return nvgBoxGradient(this.ctx, x, y, w, h, r, f, icol, ocol, out); }
        radialGradient(cx, cy, inr, outr, icol, ocol, out = new NVGpaint()) { return nvgRadialGradient(this.ctx, cx, cy, inr, outr, icol, ocol, out); }
        imagePattern(ox, oy, ex, ey, angle, image, alpha, out = new NVGpaint()) { return nvgImagePattern(this.ctx, ox, oy, ex, ey, angle, image, alpha, out); }
        scissor(x, y, w, h) { nvgScissor(this.ctx, x, y, w, h); }
        intersectScissor(x, y, w, h) { nvgIntersectScissor(this.ctx, x, y, w, h); }
        resetScissor() { nvgResetScissor(this.ctx); }
        beginPath() { nvgBeginPath(this.ctx); }
        moveTo(x, y) { nvgMoveTo(this.ctx, x, y); }
        lineTo(x, y) { nvgLineTo(this.ctx, x, y); }
        bezierTo(c1x, c1y, c2x, c2y, x, y) { nvgBezierTo(this.ctx, c1x, c1y, c2x, c2y, x, y); }
        quadTo(cx, cy, x, y) { nvgQuadTo(this.ctx, cx, cy, x, y); }
        arcTo(x1, y1, x2, y2, radius) { nvgArcTo(this.ctx, x1, y1, x2, y2, radius); }
        closePath() { nvgClosePath(this.ctx); }
        pathWinding(dir) { nvgPathWinding(this.ctx, dir); }
        arc(cx, cy, r, a0, a1, dir) { nvgArc(this.ctx, cx, cy, r, a0, a1, dir); }
        rect(x, y, w, h) { nvgRect(this.ctx, x, y, w, h); }
        roundedRect(x, y, w, h, r) { nvgRoundedRect(this.ctx, x, y, w, h, r); }
        roundedRectVarying(x, y, w, h, radTopLeft, radTopRight, radBottomRight, radBottomLeft) { nvgRoundedRectVarying(this.ctx, x, y, w, h, radTopLeft, radTopRight, radBottomRight, radBottomLeft); }
        ellipse(cx, cy, rx, ry) { nvgEllipse(this.ctx, cx, cy, rx, ry); }
        circle(cx, cy, r) { nvgCircle(this.ctx, cx, cy, r); }
        fill() { nvgFill(this.ctx); }
        stroke() { nvgStroke(this.ctx); }
        createFont(name, filename) { return nvgCreateFont(this.ctx, name, filename); }
        createFontMem(name, data) { return nvgCreateFontMem(this.ctx, name, data); }
        findFont(name) { return nvgFindFont(this.ctx, name); }
        addFallbackFontId(baseFont, fallbackFont) { return nvgAddFallbackFontId(this.ctx, baseFont, fallbackFont); }
        addFallbackFont(baseFont, fallbackFont) { return nvgAddFallbackFont(this.ctx, baseFont, fallbackFont); }
        fontSize(size) { nvgFontSize(this.ctx, size); }
        fontBlur(blur) { nvgFontBlur(this.ctx, blur); }
        textLetterSpacing(spacing) { nvgTextLetterSpacing(this.ctx, spacing); }
        textLineHeight(lineHeight) { nvgTextLineHeight(this.ctx, lineHeight); }
        textAlign(align) { nvgTextAlign(this.ctx, align); }
        fontFaceId(font) { nvgFontFaceId(this.ctx, font); }
        fontFace(font) { nvgFontFace(this.ctx, font); }
        text(x, y, string, end = null) { return nvgText(this.ctx, x, y, string, end); }
        textBox(x, y, breakRowWidth, string, end = null) { nvgTextBox(this.ctx, x, y, breakRowWidth, string, end); }
        textBounds(x, y, string, end = null, bounds = null) { return nvgTextBounds(this.ctx, x, y, string, end, bounds); }
        textBoxBounds(x, y, breakRowWidth, string, end, bounds) { nvgTextBoxBounds(this.ctx, x, y, breakRowWidth, string, end, bounds); }
        textGlyphPositions(x, y, string, end, positions) { return nvgTextGlyphPositions(this.ctx, x, y, string, end, positions); }
        textMetrics(ascender, descender, lineh) { nvgTextMetrics(this.ctx, ascender, descender, lineh); }
        textBreakLines(string, end, breakRowWidth, rows) { return nvgTextBreakLines(this.ctx, string, end, breakRowWidth, rows); }
        strokeRect(x, y, w, h) { this.beginPath(); this.rect(x, y, w, h); this.stroke(); }
        fillRect(x, y, w, h) { this.beginPath(); this.rect(x, y, w, h); this.fill(); }
        drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh) {
            const w = [0];
            const h = [0];
            this.imageSize(image, w, h);
            sw = sw || w[0];
            sh = sh || h[0];
            this.fillPaint(this.imagePattern(sx, sy, sw, sh, 0, image, 1.0));
            this.fillRect(sx, sy, sw, sh);
        }
        debugDumpPathCache() { nvgDebugDumpPathCache(this.ctx); }
    }
    function createWebGL(gl, flags) {
        return new Context(gl, flags);
    }
    function deleteWebGL(ctx) {
        ctx.delete();
    }

    exports.Bind = bindNanovg$1;
    exports.default = nanovg;
    exports.NVG_PI = NVG_PI;
    exports.NVGcolor = NVGcolor;
    exports.NVGpaint = NVGpaint;
    exports.NVGwinding = exports.Winding;
    exports.NVGsolidity = exports.Solidity;
    exports.NVGlineCap = exports.LineCap;
    exports.NVGalign = exports.Align;
    exports.NVGblendFactor = exports.BlendFactor;
    exports.NVGcompositeOperation = exports.CompositeOperation;
    exports.NVGcompositeOperationState = NVGcompositeOperationState;
    exports.NVGglyphPosition = NVGglyphPosition;
    exports.NVGtextRow = NVGtextRow;
    exports.NVGimageFlags = exports.ImageFlags;
    exports.nvgBeginFrame = nvgBeginFrame;
    exports.nvgCancelFrame = nvgCancelFrame;
    exports.nvgEndFrame = nvgEndFrame;
    exports.nvgGlobalCompositeOperation = nvgGlobalCompositeOperation;
    exports.nvgGlobalCompositeBlendFunc = nvgGlobalCompositeBlendFunc;
    exports.nvgGlobalCompositeBlendFuncSeparate = nvgGlobalCompositeBlendFuncSeparate;
    exports.nvgRGB = nvgRGB;
    exports.nvgRGBf = nvgRGBf;
    exports.nvgRGBA = nvgRGBA;
    exports.nvgRGBAf = nvgRGBAf;
    exports.nvgLerpRGBA = nvgLerpRGBA;
    exports.nvgTransRGBA = nvgTransRGBA;
    exports.nvgTransRGBAf = nvgTransRGBAf;
    exports.nvgHSL = nvgHSL;
    exports.nvgHSLA = nvgHSLA;
    exports.nvgSave = nvgSave;
    exports.nvgRestore = nvgRestore;
    exports.nvgReset = nvgReset;
    exports.nvgShapeAntiAlias = nvgShapeAntiAlias;
    exports.nvgStrokeColor = nvgStrokeColor;
    exports.nvgStrokePaint = nvgStrokePaint;
    exports.nvgFillColor = nvgFillColor;
    exports.nvgFillPaint = nvgFillPaint;
    exports.nvgMiterLimit = nvgMiterLimit;
    exports.nvgStrokeWidth = nvgStrokeWidth;
    exports.nvgLineCap = nvgLineCap;
    exports.nvgLineJoin = nvgLineJoin;
    exports.nvgGlobalAlpha = nvgGlobalAlpha;
    exports.nvgResetTransform = nvgResetTransform;
    exports.nvgTransform = nvgTransform;
    exports.nvgTranslate = nvgTranslate;
    exports.nvgRotate = nvgRotate;
    exports.nvgSkewX = nvgSkewX;
    exports.nvgSkewY = nvgSkewY;
    exports.nvgScale = nvgScale;
    exports.nvgCurrentTransform = nvgCurrentTransform;
    exports.nvgTransformIdentity = nvgTransformIdentity;
    exports.nvgTransformTranslate = nvgTransformTranslate;
    exports.nvgTransformScale = nvgTransformScale;
    exports.nvgTransformRotate = nvgTransformRotate;
    exports.nvgTransformSkewX = nvgTransformSkewX;
    exports.nvgTransformSkewY = nvgTransformSkewY;
    exports.nvgTransformMultiply = nvgTransformMultiply;
    exports.nvgTransformPremultiply = nvgTransformPremultiply;
    exports.nvgTransformInverse = nvgTransformInverse;
    exports.nvgTransformPoint = nvgTransformPoint;
    exports.nvgDegToRad = nvgDegToRad;
    exports.nvgRadToDeg = nvgRadToDeg;
    exports.nvgCreateImage = nvgCreateImage;
    exports.nvgCreateImageMem = nvgCreateImageMem;
    exports.nvgCreateImageRGBA = nvgCreateImageRGBA;
    exports.nvgUpdateImage = nvgUpdateImage;
    exports.nvgImageSize = nvgImageSize;
    exports.nvgDeleteImage = nvgDeleteImage;
    exports.nvgLinearGradient = nvgLinearGradient;
    exports.nvgBoxGradient = nvgBoxGradient;
    exports.nvgRadialGradient = nvgRadialGradient;
    exports.nvgImagePattern = nvgImagePattern;
    exports.nvgScissor = nvgScissor;
    exports.nvgIntersectScissor = nvgIntersectScissor;
    exports.nvgResetScissor = nvgResetScissor;
    exports.nvgBeginPath = nvgBeginPath;
    exports.nvgMoveTo = nvgMoveTo;
    exports.nvgLineTo = nvgLineTo;
    exports.nvgBezierTo = nvgBezierTo;
    exports.nvgQuadTo = nvgQuadTo;
    exports.nvgArcTo = nvgArcTo;
    exports.nvgClosePath = nvgClosePath;
    exports.nvgPathWinding = nvgPathWinding;
    exports.nvgArc = nvgArc;
    exports.nvgRect = nvgRect;
    exports.nvgRoundedRect = nvgRoundedRect;
    exports.nvgRoundedRectVarying = nvgRoundedRectVarying;
    exports.nvgEllipse = nvgEllipse;
    exports.nvgCircle = nvgCircle;
    exports.nvgFill = nvgFill;
    exports.nvgStroke = nvgStroke;
    exports.nvgCreateFont = nvgCreateFont;
    exports.nvgCreateFontMem = nvgCreateFontMem;
    exports.nvgFindFont = nvgFindFont;
    exports.nvgAddFallbackFontId = nvgAddFallbackFontId;
    exports.nvgAddFallbackFont = nvgAddFallbackFont;
    exports.nvgFontSize = nvgFontSize;
    exports.nvgFontBlur = nvgFontBlur;
    exports.nvgTextLetterSpacing = nvgTextLetterSpacing;
    exports.nvgTextLineHeight = nvgTextLineHeight;
    exports.nvgTextAlign = nvgTextAlign;
    exports.nvgFontFaceId = nvgFontFaceId;
    exports.nvgFontFace = nvgFontFace;
    exports.nvgText = nvgText;
    exports.nvgTextBox = nvgTextBox;
    exports.nvgTextBounds = nvgTextBounds;
    exports.nvgTextBoxBounds = nvgTextBoxBounds;
    exports.nvgTextGlyphPositions = nvgTextGlyphPositions;
    exports.nvgTextMetrics = nvgTextMetrics;
    exports.nvgTextBreakLines = nvgTextBreakLines;
    exports.nvgDebugDumpPathCache = nvgDebugDumpPathCache;
    exports.NVGcreateFlags = exports.CreateFlags;
    exports.nvgCreateWebGL = nvgCreateWebGL;
    exports.nvgDeleteWebGL = nvgDeleteWebGL;
    exports.nvglCreateImageFromHandleWebGL = nvglCreateImageFromHandleWebGL;
    exports.nvglImageHandleWebGL = nvglImageHandleWebGL;
    exports.nvgluBindFramebuffer = nvgluBindFramebuffer;
    exports.nvgluCreateFramebuffer = nvgluCreateFramebuffer;
    exports.nvgluDeleteFramebuffer = nvgluDeleteFramebuffer;
    exports.PI = NVG_PI;
    exports.Color = NVGcolor;
    exports.Paint = NVGpaint;
    exports.CompositeOperationState = NVGcompositeOperationState;
    exports.GlyphPosition = NVGglyphPosition;
    exports.TextRow = NVGtextRow;
    exports.RGB = nvgRGB;
    exports.RGBf = nvgRGBf;
    exports.RGBA = nvgRGBA;
    exports.RGBAf = nvgRGBAf;
    exports.lerpRGBA = nvgLerpRGBA;
    exports.transRGBA = nvgTransRGBA;
    exports.transRGBAf = nvgTransRGBAf;
    exports.HSL = nvgHSL;
    exports.HSLA = nvgHSLA;
    exports.transformIdentity = nvgTransformIdentity;
    exports.transformTranslate = nvgTransformTranslate;
    exports.transformScale = nvgTransformScale;
    exports.transformRotate = nvgTransformRotate;
    exports.transformSkewX = nvgTransformSkewX;
    exports.transformSkewY = nvgTransformSkewY;
    exports.transformMultiply = nvgTransformMultiply;
    exports.transformPremultiply = nvgTransformPremultiply;
    exports.transformInverse = nvgTransformInverse;
    exports.transformPoint = nvgTransformPoint;
    exports.degToRad = nvgDegToRad;
    exports.radToDeg = nvgRadToDeg;
    exports.Context = Context;
    exports.createWebGL = createWebGL;
    exports.deleteWebGL = deleteWebGL;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
